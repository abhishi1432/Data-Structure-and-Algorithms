{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"max",
				"maxSubArray"
			],
			[
				"print",
				"print_vec"
			],
			[
				"clim",
				"climbStairs_usingDP"
			],
			[
				"IN",
				"INT_MIN"
			],
			[
				"MA",
				"INT_MAX"
			],
			[
				"co",
				"coinChange2"
			],
			[
				"coinch",
				"coinChange"
			],
			[
				"minco",
				"mincoin"
			],
			[
				"coin",
				"coinChange"
			],
			[
				"ma",
				"maxSum"
			],
			[
				"for",
				"for_sum2"
			],
			[
				"ve",
				"vec"
			],
			[
				"bin",
				"bit_no"
			],
			[
				"curr",
				"currMin"
			],
			[
				"cur",
				"currMin"
			],
			[
				"cum",
				"currMax"
			],
			[
				"Cou",
				"CountAndSay"
			],
			[
				"min",
				"minCoins"
			],
			[
				"INT",
				"INT_MAX"
			],
			[
				"re",
				"reverseString"
			],
			[
				"c",
				"CPP_template()"
			],
			[
				"tra",
				"trappingWater_method4"
			],
			[
				"mx_",
				"mx_left"
			],
			[
				"find",
				"find3numbers_usingSorting_and_TwoPointer"
			],
			[
				"second",
				"second_sell"
			],
			[
				"firs",
				"first_buy"
			],
			[
				"bes",
				"best_time_maxprofit3_method3"
			],
			[
				"tem",
				"temp2"
			],
			[
				"n",
				"n_pos"
			],
			[
				"trac",
				"track1"
			],
			[
				"ad",
				"addEdge"
			],
			[
				"Arr",
				"ArrayChallenge"
			],
			[
				"prin",
				"printEdgeList"
			],
			[
				"get",
				"getWeight"
			],
			[
				"des",
				"destVertexID"
			],
			[
				"set",
				"setStateName"
			],
			[
				"pus",
				"push_back"
			],
			[
				"state_",
				"state_id"
			],
			[
				"dest",
				"destVertexID"
			],
			[
				"extra",
				"extractMax"
			],
			[
				"extract",
				"extractMax"
			],
			[
				"Max",
				"MaxHeap"
			],
			[
				"He",
				"MinHeapify"
			],
			[
				"Min",
				"MinHeapify"
			],
			[
				"pr",
				"printArray"
			],
			[
				"heap",
				"MinHeapify"
			],
			[
				"inser",
				"insertKey"
			],
			[
				"dele",
				"deleteNode"
			],
			[
				"qu",
				"Queries"
			],
			[
				"sele",
				"selectivity"
			],
			[
				"prit",
				"print_vec"
			],
			[
				"inse",
				"insertKey"
			],
			[
				"temp",
				"tempNode"
			],
			[
				"t",
				"tempNode"
			],
			[
				"queu",
				"queue"
			],
			[
				"ne",
				"next"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Leetcode/Maximum_sum_subarray.cpp",
			"settings":
			{
				"buffer_size": 5616,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"insert_completion",
					{
						"completion": "/*\n\tA B H I S H E K    S I N G H\n*/\n\n#include<bits/stdc++.h>\nusing namespace std;\nusing namespace chrono;\n\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD 1000000007\n#define MOD1 998244353\n#define INF 1e18\n#define nline \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\n#define ff first\n#define ss second\n#define PI 3.141592653589793238462\n#define set_bits __builtin_popcountll\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define all_rev(x) (x).rbegin(), (x).rend()\n\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\n#else\n#define debug(x);\n#endif\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\n\n\n/*============================================================*/\n/*    debug() functions */\n\ntemplate <class T> void _print(T t) {cerr << t;}  \ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\n/*==============================================================*/\n/*    Newly added templates */\n\ntemplate <class T> void print_vec(vector<T> v);  //printing any vector\ntemplate <class T> void print_set(set<T> s);  //printing set of any datatype\ntemplate <class T> void input_vec(vector<T> &v , int n);  //taking input of n elements of any data type into a vector\ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item);  //binary search on vector\ntemplate <class T> void print_vec(vector<T> v){ for(T i:v){ cout<<i<<\" \";}cout<<nline;} \ntemplate <class T> void print_set(set<T> s){for(T i:s){cout<<i<<\" \";}cout<<nline;}  \ntemplate <class T> void input_vec(vector<T> &v , int n){for(int i=0;i<n;i++){int temp;cin>>temp;v.pb(temp);}}   \ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item){  V low = 0; V high = n - 1; while(low<=high){{V mid = (low + high)/2; if (a[mid] == item) return mid; else if (a[mid] < item) low = mid + 1; else high = mid - 1;}} return -1;}\n\n/*===============================================================*/\n\n/*  Special puropose functions */\n\n// ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\n// ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\n// void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\n// ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\n// ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\n// bool revsort(ll a, ll b) {return a > b;}\n// void swap(int &x, int &y) {int temp = x; x = y; y = temp;}\n// ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\n// void google(int t) {cout << \"Case #\" << t << \": \";}\n// vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\n// ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\n// ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\n// ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\n// ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\n// ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\n// ll lcm(int a, int b){return (a / gcd(a, b)) * b;}\n\n/*=================================================================*/\n\n\nvoid solve() {\n\t\n\n}\n\n\nint main() {\n\tfastio();\n#ifndef ONLINE_JUDGE\n\tfreopen(\"error.txt\", \"w\", stderr);\n#endif\n\tauto start1 = high_resolution_clock::now();\n\tsolve();\n\tauto stop1 = high_resolution_clock::now();\n\tauto duration = duration_cast<microseconds>(stop1 - start1);\n#ifndef ONLINE_JUDGE\n\tcerr << \"Time: \" << duration . count() / 1000 << endl;\n#endif\n\treturn 0;\n}",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CPP_template()"
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQwAAAAAAAAAABBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAJMSAAAAAAAAaRQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMSAAAAAAAAkxIAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"unindent",
					null,
					"DgAAALgSAAAAAAAAuBIAAAAAAAAEAAAAICAgIOsSAAAAAAAA6xIAAAAAAAAEAAAAICAgIAUTAAAAAAAABRMAAAAAAAAEAAAAICAgICgTAAAAAAAAKBMAAAAAAAAEAAAAICAgIC4TAAAAAAAALhMAAAAAAAAEAAAAICAgIGMTAAAAAAAAYxMAAAAAAAAEAAAAICAgII4TAAAAAAAAjhMAAAAAAAAEAAAAICAgILgTAAAAAAAAuBMAAAAAAAAEAAAAICAgIMITAAAAAAAAwhMAAAAAAAAEAAAAICAgIOQTAAAAAAAA5BMAAAAAAAAEAAAAICAgIAUUAAAAAAAABRQAAAAAAAAEAAAAICAgIA8UAAAAAAAADxQAAAAAAAAEAAAAICAgIBUUAAAAAAAAFRQAAAAAAAAEAAAAICAgICwUAAAAAAAALBQAAAAAAAAEAAAAICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMASAAAAAAAAaRQAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					4,
					"left_delete",
					null,
					"BAAAAC8UAAAAAAAALxQAAAAAAAABAAAAIC4UAAAAAAAALhQAAAAAAAABAAAAIC0UAAAAAAAALRQAAAAAAAABAAAAICwUAAAAAAAALBQAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAUAAAAAAAAMBQAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAD8UAAAAAAAAQBQAAAAAAAAAAAAAQBQAAAAAAABBFAAAAAAAAAAAAABBFAAAAAAAAEIUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8UAAAAAAAAPxQAAAAAAAAAAAAAAIBIQA"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " n;"
					},
					"AwAAAEIUAAAAAAAAQxQAAAAAAAAAAAAAQxQAAAAAAABEFAAAAAAAAAAAAABEFAAAAAAAAEUUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIUAAAAAAAAQhQAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\ncon"
					},
					"BQAAAEUUAAAAAAAARhQAAAAAAAAAAAAARhQAAAAAAABHFAAAAAAAAAAAAABHFAAAAAAAAEgUAAAAAAAAAAAAAEgUAAAAAAAASRQAAAAAAAAAAAAASRQAAAAAAABKFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUUAAAAAAAARRQAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAEkUAAAAAAAASRQAAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoUAAAAAAAAShQAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAEkUAAAAAAAAShQAAAAAAAAAAAAAShQAAAAAAABLFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkUAAAAAAAASRQAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					3,
					"left_delete",
					null,
					"AwAAAEoUAAAAAAAAShQAAAAAAAABAAAAbkkUAAAAAAAASRQAAAAAAAABAAAAaUgUAAAAAAAASBQAAAAAAAABAAAAbw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsUAAAAAAAASxQAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "in>>n;"
					},
					"BgAAAEgUAAAAAAAASRQAAAAAAAAAAAAASRQAAAAAAABKFAAAAAAAAAAAAABKFAAAAAAAAEsUAAAAAAAAAAAAAEsUAAAAAAAATBQAAAAAAAAAAAAATBQAAAAAAABNFAAAAAAAAAAAAABNFAAAAAAAAE4UAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgUAAAAAAAASBQAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\nvec"
					},
					"BQAAAE4UAAAAAAAATxQAAAAAAAAAAAAATxQAAAAAAABQFAAAAAAAAAAAAABQFAAAAAAAAFEUAAAAAAAAAAAAAFEUAAAAAAAAUhQAAAAAAAAAAAAAUhQAAAAAAABTFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4UAAAAAAAAThQAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "tor<int"
					},
					"BwAAAFMUAAAAAAAAVBQAAAAAAAAAAAAAVBQAAAAAAABVFAAAAAAAAAAAAABVFAAAAAAAAFYUAAAAAAAAAAAAAFYUAAAAAAAAVxQAAAAAAAAAAAAAVxQAAAAAAABYFAAAAAAAAAAAAABYFAAAAAAAAFkUAAAAAAAAAAAAAFkUAAAAAAAAWhQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMUAAAAAAAAUxQAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ">ar"
					},
					"AwAAAFoUAAAAAAAAWxQAAAAAAAAAAAAAWxQAAAAAAABcFAAAAAAAAAAAAABcFAAAAAAAAF0UAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoUAAAAAAAAWhQAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "r;"
					},
					"AgAAAF0UAAAAAAAAXhQAAAAAAAAAAAAAXhQAAAAAAABfFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0UAAAAAAAAXRQAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\nin"
					},
					"BAAAAF8UAAAAAAAAYBQAAAAAAAAAAAAAYBQAAAAAAABhFAAAAAAAAAAAAABhFAAAAAAAAGIUAAAAAAAAAAAAAGIUAAAAAAAAYxQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8UAAAAAAAAXxQAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert_completion",
					{
						"completion": "int",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "int"
					},
					"AgAAAGEUAAAAAAAAYRQAAAAAAAACAAAAaW5hFAAAAAAAAGQUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMUAAAAAAAAYxQAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAGMUAAAAAAAAYxQAAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQUAAAAAAAAZBQAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAGMUAAAAAAAAZBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMUAAAAAAAAYxQAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert_completion",
					{
						"completion": "input_vec",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "input_vec"
					},
					"AgAAAGEUAAAAAAAAYRQAAAAAAAADAAAAaW5wYRQAAAAAAABqFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQUAAAAAAAAZBQAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGoUAAAAAAAAbBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoUAAAAAAAAahQAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "arr,m"
					},
					"BQAAAGsUAAAAAAAAbBQAAAAAAAAAAAAAbBQAAAAAAABtFAAAAAAAAAAAAABtFAAAAAAAAG4UAAAAAAAAAAAAAG4UAAAAAAAAbxQAAAAAAAAAAAAAbxQAAAAAAABwFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsUAAAAAAAAaxQAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAG8UAAAAAAAAbxQAAAAAAAABAAAAbQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAUAAAAAAAAcBQAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAG8UAAAAAAAAcBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8UAAAAAAAAbxQAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHEUAAAAAAAAchQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEUAAAAAAAAcRQAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\ncout<<"
					},
					"CAAAAHIUAAAAAAAAcxQAAAAAAAAAAAAAcxQAAAAAAAB0FAAAAAAAAAAAAAB0FAAAAAAAAHUUAAAAAAAAAAAAAHUUAAAAAAAAdhQAAAAAAAAAAAAAdhQAAAAAAAB3FAAAAAAAAAAAAAB3FAAAAAAAAHgUAAAAAAAAAAAAAHgUAAAAAAAAeRQAAAAAAAAAAAAAeRQAAAAAAAB6FAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIUAAAAAAAAchQAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "ma"
					},
					"AgAAAHoUAAAAAAAAexQAAAAAAAAAAAAAexQAAAAAAAB8FAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoUAAAAAAAAehQAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert_completion",
					{
						"completion": "main",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "main"
					},
					"AgAAAHoUAAAAAAAAehQAAAAAAAACAAAAbWF6FAAAAAAAAH4UAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwUAAAAAAAAfBQAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					2,
					"left_delete",
					null,
					"AgAAAH0UAAAAAAAAfRQAAAAAAAABAAAAbnwUAAAAAAAAfBQAAAAAAAABAAAAaQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4UAAAAAAAAfhQAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAHwUAAAAAAAAfRQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwUAAAAAAAAfBQAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "maxSubArray",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "maxSubArray"
					},
					"AgAAAHoUAAAAAAAAehQAAAAAAAADAAAAbWF4ehQAAAAAAACFFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0UAAAAAAAAfRQAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIUUAAAAAAAAhxQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUUAAAAAAAAhRQAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "arr"
					},
					"AwAAAIYUAAAAAAAAhxQAAAAAAAAAAAAAhxQAAAAAAACIFAAAAAAAAAAAAACIFAAAAAAAAIkUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYUAAAAAAAAhhQAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIoUAAAAAAAAixQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoUAAAAAAAAihQAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "<<nl"
					},
					"BAAAAIoUAAAAAAAAixQAAAAAAAAAAAAAixQAAAAAAACMFAAAAAAAAAAAAACMFAAAAAAAAI0UAAAAAAAAAAAAAI0UAAAAAAAAjhQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoUAAAAAAAAihQAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert_completion",
					{
						"completion": "nline",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nline"
					},
					"AgAAAIwUAAAAAAAAjBQAAAAAAAACAAAAbmyMFAAAAAAAAJEUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4UAAAAAAAAjhQAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAALUSAAAAAAAAtRIAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYSAAAAAAAAthIAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "/*\n\tA B H I S H E K    S I N G H\n*/\n\n#include<bits/stdc++.h>\nusing namespace std;\nusing namespace chrono;\n\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD 1000000007\n#define MOD1 998244353\n#define INF 1e18\n#define nline \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\n#define ff first\n#define ss second\n#define PI 3.141592653589793238462\n#define set_bits __builtin_popcountll\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define all_rev(x) (x).rbegin(), (x).rend()\n\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\n#else\n#define debug(x);\n#endif\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\n\n\n/*============================================================*/\n/*    debug() functions */\n\ntemplate <class T> void _print(T t) {cerr << t;}  \ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\n/*==============================================================*/\n/*    Newly added templates */\n\ntemplate <class T> void print_vec(vector<T> v);  //printing any vector\ntemplate <class T> void print_set(set<T> s);  //printing set of any datatype\ntemplate <class T> void input_vec(vector<T> &v , int n);  //taking input of n elements of any data type into a vector\ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item);  //binary search on vector\ntemplate <class T> void print_vec(vector<T> v){ for(T i:v){ cout<<i<<\" \";}cout<<nline;} \ntemplate <class T> void print_set(set<T> s){for(T i:s){cout<<i<<\" \";}cout<<nline;}  \ntemplate <class T> void input_vec(vector<T> &v , int n){for(int i=0;i<n;i++){int temp;cin>>temp;v.pb(temp);}}   \ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item){  V low = 0; V high = n - 1; while(low<=high){{V mid = (low + high)/2; if (a[mid] == item) return mid; else if (a[mid] < item) low = mid + 1; else high = mid - 1;}} return -1;}\n\n/*===============================================================*/\n\n/*  Special puropose functions */\n\n// ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\n// ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\n// void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\n// ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\n// ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\n// bool revsort(ll a, ll b) {return a > b;}\n// void swap(int &x, int &y) {int temp = x; x = y; y = temp;}\n// ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\n// void google(int t) {cout << \"Case #\" << t << \": \";}\n// vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\n// ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\n// ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\n// ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\n// ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\n// ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\n// ll lcm(int a, int b){return (a / gcd(a, b)) * b;}\n\n/*=================================================================*/\nbool checkXMatrix(vector<vector<int>>& grid) {\n\tint n = grid.size();\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=0;j<n;j++){\n\t\t\tif(i==j){\n\t\t\t\tif(grid[i][j]==0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(i+j==n-1){\n\t\t\t\tif(grid[i][j]==0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(grid[i][j]!=0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nvoid solve() {\n\t\n\n}\n\n\nint main() {\n\tfastio();\n#ifndef ONLINE_JUDGE\n\tfreopen(\"error.txt\", \"w\", stderr);\n#endif\n\tauto start1 = high_resolution_clock::now();\n\tsolve();\n\tauto stop1 = high_resolution_clock::now();\n\tauto duration = duration_cast<microseconds>(stop1 - start1);\n#ifndef ONLINE_JUDGE\n\tcerr << \"Time: \" << duration . count() / 1000 << endl;\n#endif\n\treturn 0;\n}",
			"file": "Leetcode/Weekly_299_6101_Check_If_Matrix_Is_X_Matrix.cpp",
			"file_size": 5497,
			"file_write_time": 133006856441230423,
			"settings":
			{
				"buffer_size": 5444,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"insert_completion",
					{
						"completion": "/*\n\tA B H I S H E K    S I N G H\n*/\n\n#include<bits/stdc++.h>\nusing namespace std;\nusing namespace chrono;\n\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD 1000000007\n#define MOD1 998244353\n#define INF 1e18\n#define nline \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\n#define ff first\n#define ss second\n#define PI 3.141592653589793238462\n#define set_bits __builtin_popcountll\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define all_rev(x) (x).rbegin(), (x).rend()\n\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\n#else\n#define debug(x);\n#endif\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\n\n\n/*============================================================*/\n/*    debug() functions */\n\ntemplate <class T> void _print(T t) {cerr << t;}  \ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\n/*==============================================================*/\n/*    Newly added templates */\n\ntemplate <class T> void print_vec(vector<T> v);  //printing any vector\ntemplate <class T> void print_set(set<T> s);  //printing set of any datatype\ntemplate <class T> void input_vec(vector<T> &v , int n);  //taking input of n elements of any data type into a vector\ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item);  //binary search on vector\ntemplate <class T> void print_vec(vector<T> v){ for(T i:v){ cout<<i<<\" \";}cout<<nline;} \ntemplate <class T> void print_set(set<T> s){for(T i:s){cout<<i<<\" \";}cout<<nline;}  \ntemplate <class T> void input_vec(vector<T> &v , int n){for(int i=0;i<n;i++){int temp;cin>>temp;v.pb(temp);}}   \ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item){  V low = 0; V high = n - 1; while(low<=high){{V mid = (low + high)/2; if (a[mid] == item) return mid; else if (a[mid] < item) low = mid + 1; else high = mid - 1;}} return -1;}\n\n/*===============================================================*/\n\n/*  Special puropose functions */\n\n// ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\n// ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\n// void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\n// ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\n// ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\n// bool revsort(ll a, ll b) {return a > b;}\n// void swap(int &x, int &y) {int temp = x; x = y; y = temp;}\n// ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\n// void google(int t) {cout << \"Case #\" << t << \": \";}\n// vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\n// ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\n// ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\n// ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\n// ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\n// ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\n// ll lcm(int a, int b){return (a / gcd(a, b)) * b;}\n\n/*=================================================================*/\n\n\nvoid solve() {\n\t\n\n}\n\n\nint main() {\n\tfastio();\n#ifndef ONLINE_JUDGE\n\tfreopen(\"error.txt\", \"w\", stderr);\n#endif\n\tauto start1 = high_resolution_clock::now();\n\tsolve();\n\tauto stop1 = high_resolution_clock::now();\n\tauto duration = duration_cast<microseconds>(stop1 - start1);\n#ifndef ONLINE_JUDGE\n\tcerr << \"Time: \" << duration . count() / 1000 << endl;\n#endif\n\treturn 0;\n}",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CPP_template()"
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQwAAAAAAAAAABBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAJMSAAAAAAAA0BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxIAAAAAAACTEgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					4,
					"left_delete",
					null,
					"BAAAAM4SAAAAAAAAzhIAAAAAAAABAAAAIM0SAAAAAAAAzRIAAAAAAAABAAAAIMwSAAAAAAAAzBIAAAAAAAABAAAAIMsSAAAAAAAAyxIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAzxIAAAAAAADPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMISAAAAAAAAwxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhIAAAAAAADCEgAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAMMSAAAAAAAAxBIAAAAAAAAAAAAAxBIAAAAAAADFEgAAAAAAAAAAAADFEgAAAAAAAMYSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxIAAAAAAADDEgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					3,
					"left_delete",
					null,
					"AwAAAMUSAAAAAAAAxRIAAAAAAAABAAAAcsQSAAAAAAAAxBIAAAAAAAABAAAAb8MSAAAAAAAAwxIAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAxhIAAAAAAADGEgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAMMSAAAAAAAAxBIAAAAAAAAAAAAAxBIAAAAAAADFEgAAAAAAAAAAAADFEgAAAAAAAMYSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxIAAAAAAADDEgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAMYSAAAAAAAAxxIAAAAAAAAAAAAAxxIAAAAAAADIEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxhIAAAAAAADGEgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAMgSAAAAAAAAyRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyBIAAAAAAADIEgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMkSAAAAAAAAyhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyRIAAAAAAADJEgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					2,
					"left_delete",
					null,
					"AgAAAMkSAAAAAAAAyRIAAAAAAAABAAAAIMgSAAAAAAAAyBIAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAyhIAAAAAAADKEgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMgSAAAAAAAAyRIAAAAAAAAAAAAAyRIAAAAAAADKEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyBIAAAAAAADIEgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " veco"
					},
					"BQAAAMoSAAAAAAAAyxIAAAAAAAAAAAAAyxIAAAAAAADMEgAAAAAAAAAAAADMEgAAAAAAAM0SAAAAAAAAAAAAAM0SAAAAAAAAzhIAAAAAAAAAAAAAzhIAAAAAAADPEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyhIAAAAAAADKEgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert_completion",
					{
						"completion": "vector",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "vector"
					},
					"AgAAAMsSAAAAAAAAyxIAAAAAAAAEAAAAdmVjb8sSAAAAAAAA0RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzxIAAAAAAADPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					6,
					"left_delete",
					null,
					"BgAAANASAAAAAAAA0BIAAAAAAAABAAAAcs8SAAAAAAAAzxIAAAAAAAABAAAAb84SAAAAAAAAzhIAAAAAAAABAAAAdM0SAAAAAAAAzRIAAAAAAAABAAAAY8wSAAAAAAAAzBIAAAAAAAABAAAAZcsSAAAAAAAAyxIAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAA0RIAAAAAAADREgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "gird"
					},
					"BAAAAMsSAAAAAAAAzBIAAAAAAAAAAAAAzBIAAAAAAADNEgAAAAAAAAAAAADNEgAAAAAAAM4SAAAAAAAAAAAAAM4SAAAAAAAAzxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyxIAAAAAAADLEgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					3,
					"left_delete",
					null,
					"AwAAAM4SAAAAAAAAzhIAAAAAAAABAAAAZM0SAAAAAAAAzRIAAAAAAAABAAAAcswSAAAAAAAAzBIAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAzxIAAAAAAADPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "rid.size"
					},
					"CAAAAMwSAAAAAAAAzRIAAAAAAAAAAAAAzRIAAAAAAADOEgAAAAAAAAAAAADOEgAAAAAAAM8SAAAAAAAAAAAAAM8SAAAAAAAA0BIAAAAAAAAAAAAA0BIAAAAAAADREgAAAAAAAAAAAADREgAAAAAAANISAAAAAAAAAAAAANISAAAAAAAA0xIAAAAAAAAAAAAA0xIAAAAAAADUEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzBIAAAAAAADMEgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANQSAAAAAAAA1hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BIAAAAAAADUEgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAANYSAAAAAAAA1xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1hIAAAAAAADWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert_completion",
					{
						"completion": "ll",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ll"
					},
					"AgAAANYSAAAAAAAA1hIAAAAAAAABAAAAbNYSAAAAAAAA2BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xIAAAAAAADXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					2,
					"left_delete",
					null,
					"AgAAANcSAAAAAAAA1xIAAAAAAAABAAAAbNYSAAAAAAAA1hIAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAA2BIAAAAAAADYEgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANYSAAAAAAAA1xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1hIAAAAAAADWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\nfor"
					},
					"BQAAANcSAAAAAAAA2BIAAAAAAAAAAAAA2BIAAAAAAADZEgAAAAAAAAAAAADZEgAAAAAAANoSAAAAAAAAAAAAANoSAAAAAAAA2xIAAAAAAAAAAAAA2xIAAAAAAADcEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xIAAAAAAADXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANwSAAAAAAAA3hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BIAAAAAAADcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "innt"
					},
					"BAAAAN0SAAAAAAAA3hIAAAAAAAAAAAAA3hIAAAAAAADfEgAAAAAAAAAAAADfEgAAAAAAAOASAAAAAAAAAAAAAOASAAAAAAAA4RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RIAAAAAAADdEgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAOESAAAAAAAA4hIAAAAAAAAAAAAA4hIAAAAAAADjEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RIAAAAAAADhEgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					4,
					"left_delete",
					null,
					"BAAAAOISAAAAAAAA4hIAAAAAAAABAAAAaeESAAAAAAAA4RIAAAAAAAABAAAAIOASAAAAAAAA4BIAAAAAAAABAAAAdN8SAAAAAAAA3xIAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAA4xIAAAAAAADjEgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAN8SAAAAAAAA4BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xIAAAAAAADfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " i=0;i<"
					},
					"BwAAAOASAAAAAAAA4RIAAAAAAAAAAAAA4RIAAAAAAADiEgAAAAAAAAAAAADiEgAAAAAAAOMSAAAAAAAAAAAAAOMSAAAAAAAA5BIAAAAAAAAAAAAA5BIAAAAAAADlEgAAAAAAAAAAAADlEgAAAAAAAOYSAAAAAAAAAAAAAOYSAAAAAAAA5xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BIAAAAAAADgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "n;i="
					},
					"BAAAAOcSAAAAAAAA6BIAAAAAAAAAAAAA6BIAAAAAAADpEgAAAAAAAAAAAADpEgAAAAAAAOoSAAAAAAAAAAAAAOoSAAAAAAAA6xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xIAAAAAAADnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAAOoSAAAAAAAA6hIAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAA6xIAAAAAAADrEgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "++"
					},
					"AgAAAOoSAAAAAAAA6xIAAAAAAAAAAAAA6xIAAAAAAADsEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6hIAAAAAAADqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAO0SAAAAAAAA7xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7RIAAAAAAADtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAO4SAAAAAAAA7xIAAAAAAAAAAAAA7xIAAAAAAADwEgAAAAAAAAAAAADwEgAAAAAAAPESAAAAAAAAAAAAAPESAAAAAAAA8hIAAAAAAAAAAAAA7xIAAAAAAADvEgAAAAAAAAEAAAAJ7xIAAAAAAADxEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7hIAAAAAAADuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAPESAAAAAAAA8hIAAAAAAAAAAAAA8hIAAAAAAADzEgAAAAAAAAAAAADzEgAAAAAAAPQSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RIAAAAAAADxEgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPQSAAAAAAAA9hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BIAAAAAAAD0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAPUSAAAAAAAA9hIAAAAAAAAAAAAA9hIAAAAAAAD3EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9RIAAAAAAAD1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " ti"
					},
					"AwAAAPcSAAAAAAAA+BIAAAAAAAAAAAAA+BIAAAAAAAD5EgAAAAAAAAAAAAD5EgAAAAAAAPoSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9xIAAAAAAAD3EgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					3,
					"left_delete",
					null,
					"AwAAAPkSAAAAAAAA+RIAAAAAAAABAAAAafgSAAAAAAAA+BIAAAAAAAABAAAAdPcSAAAAAAAA9xIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA+hIAAAAAAAD6EgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAPcSAAAAAAAA+BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9xIAAAAAAAD3EgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAAPgSAAAAAAAA+RIAAAAAAAAAAAAA+RIAAAAAAAD6EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+BIAAAAAAAD4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAPkSAAAAAAAA+RIAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAA+hIAAAAAAAD6EgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "j=0;j<"
					},
					"BgAAAPkSAAAAAAAA+hIAAAAAAAAAAAAA+hIAAAAAAAD7EgAAAAAAAAAAAAD7EgAAAAAAAPwSAAAAAAAAAAAAAPwSAAAAAAAA/RIAAAAAAAAAAAAA/RIAAAAAAAD+EgAAAAAAAAAAAAD+EgAAAAAAAP8SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RIAAAAAAAD5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "n;j++"
					},
					"BQAAAP8SAAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAABEwAAAAAAAAAAAAABEwAAAAAAAAITAAAAAAAAAAAAAAITAAAAAAAAAxMAAAAAAAAAAAAAAxMAAAAAAAAEEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/xIAAAAAAAD/EgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAUTAAAAAAAABxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABRMAAAAAAAAFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAAYTAAAAAAAABxMAAAAAAAAAAAAABxMAAAAAAAAJEwAAAAAAAAAAAAAJEwAAAAAAAAoTAAAAAAAAAAAAAAoTAAAAAAAADBMAAAAAAAAAAAAABxMAAAAAAAAHEwAAAAAAAAIAAAAJCQcTAAAAAAAAChMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhMAAAAAAAAGEwAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAAoTAAAAAAAACxMAAAAAAAAAAAAACxMAAAAAAAAMEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAChMAAAAAAAAKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAwTAAAAAAAADhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBMAAAAAAAAMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "i==j"
					},
					"BAAAAA0TAAAAAAAADhMAAAAAAAAAAAAADhMAAAAAAAAPEwAAAAAAAAAAAAAPEwAAAAAAABATAAAAAAAAAAAAABATAAAAAAAAERMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRMAAAAAAAANEwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABITAAAAAAAAFBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEhMAAAAAAAASEwAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAABITAAAAAAAAEhMAAAAAAAABAAAAWxITAAAAAAAAEhMAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAExMAAAAAAAATEwAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABITAAAAAAAAFBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEhMAAAAAAAASEwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAABMTAAAAAAAAFBMAAAAAAAAAAAAAFBMAAAAAAAAXEwAAAAAAAAAAAAAXEwAAAAAAABgTAAAAAAAAAAAAABgTAAAAAAAAGxMAAAAAAAAAAAAAFBMAAAAAAAAUEwAAAAAAAAMAAAAJCQkUEwAAAAAAABgTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAExMAAAAAAAATEwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAABgTAAAAAAAAGRMAAAAAAAAAAAAAGRMAAAAAAAAaEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGBMAAAAAAAAYEwAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABoTAAAAAAAAHBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhMAAAAAAAAaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "gridp"
					},
					"BQAAABsTAAAAAAAAHBMAAAAAAAAAAAAAHBMAAAAAAAAdEwAAAAAAAAAAAAAdEwAAAAAAAB4TAAAAAAAAAAAAAB4TAAAAAAAAHxMAAAAAAAAAAAAAHxMAAAAAAAAgEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGxMAAAAAAAAbEwAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAACATAAAAAAAAIhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIBMAAAAAAAAgEwAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAACETAAAAAAAAIhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIRMAAAAAAAAhEwAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAACMTAAAAAAAAJRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxMAAAAAAAAjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAACQTAAAAAAAAJRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBMAAAAAAAAkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "==0"
					},
					"AwAAACYTAAAAAAAAJxMAAAAAAAAAAAAAJxMAAAAAAAAoEwAAAAAAAAAAAAAoEwAAAAAAACkTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhMAAAAAAAAmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BgAAACoTAAAAAAAAKxMAAAAAAAAAAAAAKxMAAAAAAAAvEwAAAAAAAAAAAAArEwAAAAAAACsTAAAAAAAABAAAAAkJCQkrEwAAAAAAADATAAAAAAAAAAAAADATAAAAAAAAMRMAAAAAAAAAAAAAMRMAAAAAAAAyEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKhMAAAAAAAAqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAADATAAAAAAAAMBMAAAAAAAACAAAAcmUwEwAAAAAAADYTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhMAAAAAAAAyEwAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADYTAAAAAAAANxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhMAAAAAAAA2EwAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "false;"
					},
					"BgAAADcTAAAAAAAAOBMAAAAAAAAAAAAAOBMAAAAAAAA5EwAAAAAAAAAAAAA5EwAAAAAAADoTAAAAAAAAAAAAADoTAAAAAAAAOxMAAAAAAAAAAAAAOxMAAAAAAAA8EwAAAAAAAAAAAAA8EwAAAAAAAD0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxMAAAAAAAA3EwAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BgAAAD0TAAAAAAAAPhMAAAAAAAAAAAAAPhMAAAAAAABDEwAAAAAAAAAAAAA+EwAAAAAAAD4TAAAAAAAABQAAAAkJCQkJPhMAAAAAAABCEwAAAAAAAAAAAABCEwAAAAAAAEMTAAAAAAAAAAAAAEMTAAAAAAAARBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPRMAAAAAAAA9EwAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEQTAAAAAAAARhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBMAAAAAAABEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAB8TAAAAAAAAHxMAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAIBMAAAAAAAAgEwAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAEQTAAAAAAAARRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBMAAAAAAABEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"left_delete",
					null,
					"AQAAAEQTAAAAAAAARBMAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAARRMAAAAAAABFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "grud"
					},
					"BAAAAEQTAAAAAAAARRMAAAAAAAAAAAAARRMAAAAAAABGEwAAAAAAAAAAAABGEwAAAAAAAEcTAAAAAAAAAAAAAEcTAAAAAAAASBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBMAAAAAAABEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					2,
					"left_delete",
					null,
					"AgAAAEcTAAAAAAAARxMAAAAAAAABAAAAZEYTAAAAAAAARhMAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAASBMAAAAAAABIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "id"
					},
					"AgAAAEYTAAAAAAAARxMAAAAAAAAAAAAARxMAAAAAAABIEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhMAAAAAAABGEwAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEgTAAAAAAAAShMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBMAAAAAAABIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAEkTAAAAAAAAShMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASRMAAAAAAABJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BwAAADwTAAAAAAAAPRMAAAAAAAAAAAAAPRMAAAAAAABCEwAAAAAAAAAAAAA9EwAAAAAAAD0TAAAAAAAABQAAAAkJCQkJPRMAAAAAAABBEwAAAAAAAAAAAABBEwAAAAAAAEITAAAAAAAAAAAAAD0TAAAAAAAAPRMAAAAAAAAEAAAACQkJCT0TAAAAAAAAQBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPBMAAAAAAAA8EwAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					13,
					"left_delete",
					null,
					"DQAAAFATAAAAAAAAUBMAAAAAAAABAAAAKU8TAAAAAAAATxMAAAAAAAABAAAAXU4TAAAAAAAAThMAAAAAAAABAAAAaU0TAAAAAAAATRMAAAAAAAABAAAAW0wTAAAAAAAATBMAAAAAAAABAAAAZEsTAAAAAAAASxMAAAAAAAABAAAAaUoTAAAAAAAAShMAAAAAAAABAAAAckkTAAAAAAAASRMAAAAAAAABAAAAZ0gTAAAAAAAASBMAAAAAAAABAAAAKEcTAAAAAAAARxMAAAAAAAABAAAAZkYTAAAAAAAARhMAAAAAAAABAAAAaUUTAAAAAAAARRMAAAAAAAABAAAACUQTAAAAAAAARBMAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAURMAAAAAAABREwAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEQTAAAAAAAARRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBMAAAAAAABEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					5,
					"left_delete",
					null,
					"BQAAAEkTAAAAAAAASRMAAAAAAAABAAAAfUgTAAAAAAAASBMAAAAAAAABAAAACUcTAAAAAAAARxMAAAAAAAABAAAACUYTAAAAAAAARhMAAAAAAAABAAAACUUTAAAAAAAARRMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAShMAAAAAAABKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAEUTAAAAAAAARhMAAAAAAAAAAAAARhMAAAAAAABHEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARRMAAAAAAABFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEcTAAAAAAAASRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxMAAAAAAABHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "i+"
					},
					"AgAAAEgTAAAAAAAASRMAAAAAAAAAAAAASRMAAAAAAABKEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBMAAAAAAABIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					2,
					"left_delete",
					null,
					"AgAAAEkTAAAAAAAASRMAAAAAAAABAAAAK0gTAAAAAAAASBMAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAShMAAAAAAABKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAEcTAAAAAAAARxMAAAAAAAABAAAAKEcTAAAAAAAARxMAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAASBMAAAAAAABIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					2,
					"left_delete",
					null,
					"AgAAAEYTAAAAAAAARhMAAAAAAAABAAAAZkUTAAAAAAAARRMAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAARxMAAAAAAABHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "else"
					},
					"BAAAAEUTAAAAAAAARhMAAAAAAAAAAAAARhMAAAAAAABHEwAAAAAAAAAAAABHEwAAAAAAAEgTAAAAAAAAAAAAAEgTAAAAAAAASRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARRMAAAAAAABFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAEkTAAAAAAAAShMAAAAAAAAAAAAAShMAAAAAAABLEwAAAAAAAAAAAABLEwAAAAAAAEwTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASRMAAAAAAABJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEwTAAAAAAAAThMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBMAAAAAAABMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAE0TAAAAAAAAThMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRMAAAAAAABNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"left_delete",
					null,
					"AQAAAE0TAAAAAAAATRMAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAThMAAAAAAABOEwAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAEwTAAAAAAAATBMAAAAAAAABAAAAKEwTAAAAAAAATBMAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAATRMAAAAAAABNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					7,
					"left_delete",
					null,
					"BwAAAEsTAAAAAAAASxMAAAAAAAABAAAAZkoTAAAAAAAAShMAAAAAAAABAAAAaUkTAAAAAAAASRMAAAAAAAABAAAAIEgTAAAAAAAASBMAAAAAAAABAAAAZUcTAAAAAAAARxMAAAAAAAABAAAAc0YTAAAAAAAARhMAAAAAAAABAAAAbEUTAAAAAAAARRMAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAATBMAAAAAAABMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAEUTAAAAAAAARhMAAAAAAAAAAAAARhMAAAAAAABHEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARRMAAAAAAABFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEcTAAAAAAAASRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxMAAAAAAABHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "i+j=="
					},
					"BQAAAEgTAAAAAAAASRMAAAAAAAAAAAAASRMAAAAAAABKEwAAAAAAAAAAAABKEwAAAAAAAEsTAAAAAAAAAAAAAEsTAAAAAAAATBMAAAAAAAAAAAAATBMAAAAAAABNEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBMAAAAAAABIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "n-1"
					},
					"AwAAAE0TAAAAAAAAThMAAAAAAAAAAAAAThMAAAAAAABPEwAAAAAAAAAAAABPEwAAAAAAAFATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRMAAAAAAABNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFETAAAAAAAAUxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAURMAAAAAAABREwAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAFITAAAAAAAAUxMAAAAAAAAAAAAAUxMAAAAAAABWEwAAAAAAAAAAAABWEwAAAAAAAFcTAAAAAAAAAAAAAFcTAAAAAAAAWhMAAAAAAAAAAAAAUxMAAAAAAABTEwAAAAAAAAMAAAAJCQlTEwAAAAAAAFcTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhMAAAAAAABSEwAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAFcTAAAAAAAAWBMAAAAAAAAAAAAAWBMAAAAAAABZEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVxMAAAAAAABXEwAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFkTAAAAAAAAWxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWRMAAAAAAABZEwAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "grid"
					},
					"BAAAAFoTAAAAAAAAWxMAAAAAAAAAAAAAWxMAAAAAAABcEwAAAAAAAAAAAABcEwAAAAAAAF0TAAAAAAAAAAAAAF0TAAAAAAAAXhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhMAAAAAAABaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAF4TAAAAAAAAYBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhMAAAAAAABeEwAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAF8TAAAAAAAAYBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxMAAAAAAABfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAGETAAAAAAAAYxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYRMAAAAAAABhEwAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAAGITAAAAAAAAYxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhMAAAAAAABiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "==0"
					},
					"AwAAAGQTAAAAAAAAZRMAAAAAAAAAAAAAZRMAAAAAAABmEwAAAAAAAAAAAABmEwAAAAAAAGcTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBMAAAAAAABkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BgAAAGgTAAAAAAAAaRMAAAAAAAAAAAAAaRMAAAAAAABtEwAAAAAAAAAAAABpEwAAAAAAAGkTAAAAAAAABAAAAAkJCQlpEwAAAAAAAG4TAAAAAAAAAAAAAG4TAAAAAAAAbxMAAAAAAAAAAAAAbxMAAAAAAABwEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBMAAAAAAABoEwAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAG4TAAAAAAAAbhMAAAAAAAACAAAAcmVuEwAAAAAAAHQTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcBMAAAAAAABwEwAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHQTAAAAAAAAdRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBMAAAAAAAB0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "false;"
					},
					"BgAAAHUTAAAAAAAAdhMAAAAAAAAAAAAAdhMAAAAAAAB3EwAAAAAAAAAAAAB3EwAAAAAAAHgTAAAAAAAAAAAAAHgTAAAAAAAAeRMAAAAAAAAAAAAAeRMAAAAAAAB6EwAAAAAAAAAAAAB6EwAAAAAAAHsTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdRMAAAAAAAB1EwAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "else"
					},
					"BAAAAEUTAAAAAAAARhMAAAAAAAAAAAAARhMAAAAAAABHEwAAAAAAAAAAAABHEwAAAAAAAEgTAAAAAAAAAAAAAEgTAAAAAAAASRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARRMAAAAAAABFEwAAAAAAAAAAAAAAwFhA"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEkTAAAAAAAAShMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASRMAAAAAAABJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "\nesle"
					},
					"BgAAAIUTAAAAAAAAhhMAAAAAAAAAAAAAhhMAAAAAAACJEwAAAAAAAAAAAACJEwAAAAAAAIoTAAAAAAAAAAAAAIoTAAAAAAAAixMAAAAAAAAAAAAAixMAAAAAAACMEwAAAAAAAAAAAACMEwAAAAAAAI0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRMAAAAAAACFEwAAAAAAAAAAAAAAgGFA"
				],
				[
					146,
					3,
					"left_delete",
					null,
					"AwAAAIwTAAAAAAAAjBMAAAAAAAABAAAAZYsTAAAAAAAAixMAAAAAAAABAAAAbIoTAAAAAAAAihMAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAjRMAAAAAAACNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "lse"
					},
					"AwAAAIoTAAAAAAAAixMAAAAAAAAAAAAAixMAAAAAAACMEwAAAAAAAAAAAACMEwAAAAAAAI0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihMAAAAAAACKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAI0TAAAAAAAAjhMAAAAAAAAAAAAAjhMAAAAAAACREwAAAAAAAAAAAACOEwAAAAAAAI4TAAAAAAAAAwAAAAkJCY4TAAAAAAAAkhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjRMAAAAAAACNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					5,
					"left_delete",
					null,
					"BQAAAJETAAAAAAAAkRMAAAAAAAABAAAACZATAAAAAAAAkBMAAAAAAAABAAAACY8TAAAAAAAAjxMAAAAAAAABAAAACY4TAAAAAAAAjhMAAAAAAAABAAAACY0TAAAAAAAAjRMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAkhMAAAAAAACSEwAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAI0TAAAAAAAAjxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjRMAAAAAAACNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAI4TAAAAAAAAjxMAAAAAAAAAAAAAjxMAAAAAAACSEwAAAAAAAAAAAACSEwAAAAAAAJMTAAAAAAAAAAAAAJMTAAAAAAAAlhMAAAAAAAAAAAAAjxMAAAAAAACPEwAAAAAAAAMAAAAJCQmPEwAAAAAAAJMTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhMAAAAAAACOEwAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAJMTAAAAAAAAlBMAAAAAAAAAAAAAlBMAAAAAAACVEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxMAAAAAAACTEwAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJUTAAAAAAAAlxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlRMAAAAAAACVEwAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "grid"
					},
					"BAAAAJYTAAAAAAAAlxMAAAAAAAAAAAAAlxMAAAAAAACYEwAAAAAAAAAAAACYEwAAAAAAAJkTAAAAAAAAAAAAAJkTAAAAAAAAmhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhMAAAAAAACWEwAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJoTAAAAAAAAnBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmhMAAAAAAACaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAJsTAAAAAAAAnBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmxMAAAAAAACbEwAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJ0TAAAAAAAAnxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnRMAAAAAAACdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAAJ4TAAAAAAAAnxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhMAAAAAAACeEwAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "!=0"
					},
					"AwAAAKATAAAAAAAAoRMAAAAAAAAAAAAAoRMAAAAAAACiEwAAAAAAAAAAAACiEwAAAAAAAKMTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBMAAAAAAACgEwAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BgAAAKQTAAAAAAAApRMAAAAAAAAAAAAApRMAAAAAAACpEwAAAAAAAAAAAAClEwAAAAAAAKUTAAAAAAAABAAAAAkJCQmlEwAAAAAAAKoTAAAAAAAAAAAAAKoTAAAAAAAAqxMAAAAAAAAAAAAAqxMAAAAAAACsEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApBMAAAAAAACkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAKoTAAAAAAAAqhMAAAAAAAACAAAAcmWqEwAAAAAAALATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBMAAAAAAACsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " fla"
					},
					"BAAAALATAAAAAAAAsRMAAAAAAAAAAAAAsRMAAAAAAACyEwAAAAAAAAAAAACyEwAAAAAAALMTAAAAAAAAAAAAALMTAAAAAAAAtBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsBMAAAAAAACwEwAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					2,
					"left_delete",
					null,
					"AgAAALMTAAAAAAAAsxMAAAAAAAABAAAAYbITAAAAAAAAshMAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAtBMAAAAAAAC0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "alse;"
					},
					"BQAAALITAAAAAAAAsxMAAAAAAAAAAAAAsxMAAAAAAAC0EwAAAAAAAAAAAAC0EwAAAAAAALUTAAAAAAAAAAAAALUTAAAAAAAAthMAAAAAAAAAAAAAthMAAAAAAAC3EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshMAAAAAAACyEwAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					8,
					"left_delete",
					null,
					"CAAAAMoTAAAAAAAAyhMAAAAAAAABAAAAIMkTAAAAAAAAyRMAAAAAAAABAAAAIMgTAAAAAAAAyBMAAAAAAAABAAAAIMcTAAAAAAAAxxMAAAAAAAABAAAAIMYTAAAAAAAAxhMAAAAAAAABAAAAIMUTAAAAAAAAxRMAAAAAAAABAAAAIMQTAAAAAAAAxBMAAAAAAAABAAAAIMMTAAAAAAAAwxMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAyxMAAAAAAADLEwAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAAMMTAAAAAAAAxBMAAAAAAAAAAAAAxBMAAAAAAADFEwAAAAAAAAAAAADFEwAAAAAAAMYTAAAAAAAAAAAAAMYTAAAAAAAAxxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxMAAAAAAADDEwAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAMUTAAAAAAAAxRMAAAAAAAACAAAAcmXFEwAAAAAAAMsTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxxMAAAAAAADHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": " true;"
					},
					"BgAAAMsTAAAAAAAAzBMAAAAAAAAAAAAAzBMAAAAAAADNEwAAAAAAAAAAAADNEwAAAAAAAM4TAAAAAAAAAAAAAM4TAAAAAAAAzxMAAAAAAAAAAAAAzxMAAAAAAADQEwAAAAAAAAAAAADQEwAAAAAAANETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyxMAAAAAAADLEwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "Leetcode/input.txt",
			"settings":
			{
				"buffer_size": 11,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "hello"
					},
					"BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " this"
					},
					"BQAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " abhihsek"
					},
					"CQAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " isngh"
					},
					"BgAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYAAAAAAAAAFgAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					10,
					"left_delete",
					null,
					"CgAAABsAAAAAAAAAGwAAAAAAAAABAAAAaBoAAAAAAAAAGgAAAAAAAAABAAAAZxkAAAAAAAAAGQAAAAAAAAABAAAAbhgAAAAAAAAAGAAAAAAAAAABAAAAcxcAAAAAAAAAFwAAAAAAAAABAAAAaRYAAAAAAAAAFgAAAAAAAAABAAAAIBUAAAAAAAAAFQAAAAAAAAABAAAAaxQAAAAAAAAAFAAAAAAAAAABAAAAZRMAAAAAAAAAEwAAAAAAAAABAAAAcxIAAAAAAAAAEgAAAAAAAAABAAAAaA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "shek"
					},
					"BAAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAAAFgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIAAAAAAAAAEgAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " singh"
					},
					"BgAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYAAAAAAAAAFgAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAaGVsbG8gdGhpcyBpcyBhYmhpc2hlayBzaW5naA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n3"
					},
					"AgAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " 5"
					},
					"AgAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " 6"
					},
					"AgAAAAsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAANAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					8,
					"left_delete",
					null,
					"CAAAAA4AAAAAAAAADgAAAAAAAAABAAAANA0AAAAAAAAADQAAAAAAAAABAAAAIAwAAAAAAAAADAAAAAAAAAABAAAANgsAAAAAAAAACwAAAAAAAAABAAAAIAoAAAAAAAAACgAAAAAAAAABAAAANQkAAAAAAAAACQAAAAAAAAABAAAAIAgAAAAAAAAACAAAAAAAAAABAAAAMQcAAAAAAAAABwAAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " 3"
					},
					"AgAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAAsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAANAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " 45"
					},
					"AwAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAA8AAAAAAAAADwAAAAAAAAABAAAANQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " 5"
					},
					"AgAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " 56"
					},
					"AwAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEAAAAAAAAAEQAAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAABMAAAAAAAAAEwAAAAAAAAABAAAANg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " 6"
					},
					"AgAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMAAAAAAAAAEwAAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAAIAAAAAAAAAAgAAAAAAAAABAAAAMg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAIBhQA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAAIAAAAAAAAAAwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAANg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAAQAAAAAAAAABAAAAAAAAAARAAAAMyAyIDMgMSAyIDQgNSA1IDY",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUAAAAAAAAABAAAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAAQAAAAAAAAABgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAAUAAAAAAAAABgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcAAAAAAAAACAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					4,
					"left_delete",
					null,
					"BAAAAAcAAAAAAAAABwAAAAAAAAABAAAAIAYAAAAAAAAABgAAAAAAAAABAAAAIgUAAAAAAAAABQAAAAAAAAABAAAAMwQAAAAAAAAABAAAAAAAAAABAAAAIg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAAQAAAAAAAAABQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUAAAAAAAAABgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					2,
					"left_delete",
					null,
					"AgAAAAUAAAAAAAAABQAAAAAAAAABAAAAIAQAAAAAAAAABAAAAAAAAAABAAAANg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAAQAAAAAAAAABQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " 6"
					},
					"AgAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " 7"
					},
					"AgAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " 10"
					},
					"AwAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					3,
					"left_delete",
					null,
					"AwAAAAIAAAAAAAAAAgAAAAAAAAABAAAANAEAAAAAAAAAAQAAAAAAAAABAAAAIAAAAAAAAAAAAAAAAAAAAAABAAAAOQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAIBQQA"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAwAAAA0IDQKMyA2IDcgMTA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					2,
					"left_delete",
					null,
					"AgAAAAMAAAAAAAAAAwAAAAAAAAABAAAAMQIAAAAAAAAAAgAAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAADwvw"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAAIAAAAAAAAAAwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " 3"
					},
					"AgAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " 5"
					},
					"AgAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "Leetcode/output.txt",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAY2hlY2sAAAAAAAAAAB0AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAdAAAAaGVsbG8gdGhpcyBpcyBhYmhpc2hlayBzaW5naAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAaCBnIG4gaSBzICAgayBlIGggcyBpIGggYiBhICAgcyBpICAgcyBpIGggdCAgIG8gbCBsIGUgaCAKAAAAAAAAAAByAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAByAAAAaCBlIGwgbCBvICAgdCBoIGkgcyAgIGkgcyAgIGEgYiBoIGkgcyBoIGUgayAgIHMgaSBuIGcgaCAKaCBnIG4gaSBzICAgayBlIGggcyBpIGggYiBhICAgcyBpICAgcyBpIGggdCAgIG8gbCBsIGUgaCAKAAAAAAAAAAACAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAACAAAANAoAAAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAACAAAANQoAAAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAACAAAANAoAAAAAAAAAAAcAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAMTAgMTEwCgAAAAAAAAAACAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAMTAgMQoxMAoAAAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAMjAKAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "Leetcode/error.txt",
			"settings":
			{
				"buffer_size": 8,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/Tech learn and project/coding/CPP practice/Leetcode"
	],
	"file_history":
	[
		"/F/Tech learn and project/coding/CPP practice/Leetcode/Reverse_String.cpp",
		"/F/Tech learn and project/coding/CPP practice/Leetcode/kth_Largest_Smallest_in_array.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/error.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/2.Coin_Change.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/input.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/output.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/1.Climbing_Stairs.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/output.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/input.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/error.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Climbing_Stairs.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Contains_Duplicate.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Container_With_Most_Water.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Three_Sum.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DailyChallange_CoinChange.cpp",
		"/E/json",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Missing_Number.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Counting_Bits.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Kira_amazon.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Reverse_Bits.cpp",
		"/C/Users/Abhishek Wisteli/Desktop/backupProcessingPipeline.js",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Number_Of_1_Bits.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Sum_Of_Two_Integers.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Search_In_Rotated_Sorted_Array.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Minimum_In_Rotated_Sorted_Array.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Product_Of_Array_Except_Self.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Maximum_Subarray.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Maximum_Product_Subarray.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Maximum_Product_Of_Three_Numbers.cpp",
		"/C/Users/Abhishek Wisteli/AppData/Roaming/Sublime Text/Packages/User/CPP_template.sublime-snippet",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Two_Sum.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Best_Time_To_Buy_And_Sell_Stock.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Two Sum.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques7.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/DP_Ques1.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques10.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques11.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques2.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques1.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques3.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques5.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques36.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_Ques35.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/error.txt",
		"/F/Tech learn and project/coding/CPP practice/love babbar/output.txt",
		"/F/Tech learn and project/coding/CPP practice/love babbar/input.txt",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques34.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques30.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques33.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques32.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques31.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques29.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques19.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques28.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques26.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques18.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques25.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/fileInput (1).txt.crdownload",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques9.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques24.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques23.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques22.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques21.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques20.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/LinkedList.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/friend_class.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Codevita2022_ques1.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Codevita2022_ques2.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Codevita2022_ques4.py",
		"/F/Tech learn and project/coding/CPP practice/learn DS/graph_adjacencyList_cycleCheck_Directed.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/graph_adjacencyList_cycleCheck_Undirected.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/segmentTree_range_Query.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/deepti.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/shubham_chocolate.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/graph_adjacencyList_SimpleUsingArrayOfVector_gfg.cpp",
		"/C/Users/Abhishek Wisteli/Desktop/Screenshot 2022-02-04 100917.png",
		"/F/Tech learn and project/coding/CPP practice/learn DS/graph_adjacencyList_ComplexUsingYoutube.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/prakhar.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/output.txt",
		"/F/Tech learn and project/coding/CPP practice/learn DS/bianryheap.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Stack.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Queue.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Binarytree.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/BinaryTreeViaArray.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/BinarySearchTree.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/temp.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/anupamq2.cpp",
		"/G/Desktop Folders/Tech learn and project/coding/CPP practice/output.txt",
		"/G/Desktop Folders/Tech learn and project/coding/CPP practice/error.txt",
		"/G/Desktop Folders/Tech learn and project/coding/CPP practice/input.txt",
		"/G/Desktop Folders/Tech learn and project/coding/CPP practice/hello.cpp",
		"/C/Users/Abhishek Wisteli/AppData/Roaming/Sublime Text/Packages/User/hello.cpp"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "F:\\Tech learn and project\\coding\\CPP practice\\Leetcode"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Leetcode/Maximum_sum_subarray.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5616,
						"regions":
						{
						},
						"selection":
						[
							[
								5139,
								5139
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Leetcode/Weekly_299_6101_Check_If_Matrix_Is_X_Matrix.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5444,
						"regions":
						{
						},
						"selection":
						[
							[
								4803,
								5073
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1290.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "Leetcode/input.txt",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11,
						"regions":
						{
						},
						"selection":
						[
							[
								11,
								11
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 3,
					"file": "Leetcode/output.txt",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Leetcode/error.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.697783461211,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/CPP.sublime-build",
	"project": "",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		]
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 193.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
