{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"com",
				"combinationSum4_DP"
			],
			[
				"re",
				"removeNthFromEnd"
			],
			[
				"for",
				"forCount"
			],
			[
				"head",
				"head_new"
			],
			[
				"l",
				"list2"
			],
			[
				"te",
				"temp1"
			],
			[
				"lst",
				"list1"
			],
			[
				"list",
				"list1"
			],
			[
				"lis",
				"list1"
			],
			[
				"reve",
				"reverseLinkedList_Iterative"
			],
			[
				"new",
				"new_head"
			],
			[
				"addn",
				"addNodeAtEnd"
			],
			[
				"longes",
				"longestCommonSubsequence_UsingRecursion"
			],
			[
				"INT",
				"INT_MIN"
			],
			[
				"IN",
				"INT_MIN"
			],
			[
				"call",
				"call_all_functions_here"
			],
			[
				"bina",
				"binarySearchh_lengthOfLIS_Helper"
			],
			[
				"mem",
				"memo"
			],
			[
				"su",
				"subAns"
			],
			[
				"toa",
				"total_ways_to_make_helper"
			],
			[
				"tot",
				"total_ways_to_make_helper"
			],
			[
				"min",
				"minimum_no_of_coins_to_make"
			],
			[
				"clim",
				"climbStairs_usingDP"
			],
			[
				"MA",
				"INT_MAX"
			],
			[
				"co",
				"coinChange2"
			],
			[
				"coinch",
				"coinChange"
			],
			[
				"minco",
				"mincoin"
			],
			[
				"coin",
				"coinChange"
			],
			[
				"ma",
				"maxSum"
			],
			[
				"ve",
				"vec"
			],
			[
				"bin",
				"bit_no"
			],
			[
				"max",
				"maxProd"
			],
			[
				"curr",
				"currMin"
			],
			[
				"cur",
				"currMin"
			],
			[
				"cum",
				"currMax"
			],
			[
				"Cou",
				"CountAndSay"
			],
			[
				"c",
				"CPP_template()"
			],
			[
				"tra",
				"trappingWater_method4"
			],
			[
				"mx_",
				"mx_left"
			],
			[
				"find",
				"find3numbers_usingSorting_and_TwoPointer"
			],
			[
				"second",
				"second_sell"
			],
			[
				"firs",
				"first_buy"
			],
			[
				"bes",
				"best_time_maxprofit3_method3"
			],
			[
				"tem",
				"temp2"
			],
			[
				"print",
				"print_vec"
			],
			[
				"n",
				"n_pos"
			],
			[
				"trac",
				"track1"
			],
			[
				"ad",
				"addEdge"
			],
			[
				"Arr",
				"ArrayChallenge"
			],
			[
				"prin",
				"printEdgeList"
			],
			[
				"get",
				"getWeight"
			],
			[
				"des",
				"destVertexID"
			],
			[
				"set",
				"setStateName"
			],
			[
				"pus",
				"push_back"
			],
			[
				"state_",
				"state_id"
			],
			[
				"dest",
				"destVertexID"
			],
			[
				"extra",
				"extractMax"
			],
			[
				"extract",
				"extractMax"
			],
			[
				"Max",
				"MaxHeap"
			],
			[
				"He",
				"MinHeapify"
			],
			[
				"Min",
				"MinHeapify"
			],
			[
				"pr",
				"printArray"
			],
			[
				"heap",
				"MinHeapify"
			],
			[
				"inser",
				"insertKey"
			],
			[
				"dele",
				"deleteNode"
			],
			[
				"qu",
				"Queries"
			],
			[
				"sele",
				"selectivity"
			],
			[
				"prit",
				"print_vec"
			],
			[
				"inse",
				"insertKey"
			],
			[
				"temp",
				"tempNode"
			],
			[
				"t",
				"tempNode"
			],
			[
				"queu",
				"queue"
			],
			[
				"ne",
				"next"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Blind 75/DP/5.Word_Break.cpp",
			"settings":
			{
				"buffer_size": 5124,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"insert_completion",
					{
						"completion": "/*\n\tA B H I S H E K    S I N G H\n*/\n\n#include<bits/stdc++.h>\nusing namespace std;\nusing namespace chrono;\n\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD 1000000007\n#define MOD1 998244353\n#define INF 1e18\n#define nline \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\n#define ff first\n#define ss second\n#define PI 3.141592653589793238462\n#define set_bits __builtin_popcountll\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define all_rev(x) (x).rbegin(), (x).rend()\n\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\n#else\n#define debug(x);\n#endif\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\n\n\n/*============================================================*/\n/*    debug() functions */\n\ntemplate <class T> void _print(T t) {cerr << t;}  \ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\n/*==============================================================*/\n/*    Newly added templates */\n\ntemplate <class T> void print_vec(vector<T> v);  //printing any vector\ntemplate <class T> void print_set(set<T> s);  //printing set of any datatype\ntemplate <class T> void input_vec(vector<T> &v , int n);  //taking input of n elements of any data type into a vector\ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item);  //binary search on vector\ntemplate <class T> void print_vec(vector<T> v){ for(T i:v){ cout<<i<<\" \";}cout<<nline;} \ntemplate <class T> void print_set(set<T> s){for(T i:s){cout<<i<<\" \";}cout<<nline;}  \ntemplate <class T> void input_vec(vector<T> &v , int n){for(int i=0;i<n;i++){int temp;cin>>temp;v.pb(temp);}}   \ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item){  V low = 0; V high = n - 1; while(low<=high){{V mid = (low + high)/2; if (a[mid] == item) return mid; else if (a[mid] < item) low = mid + 1; else high = mid - 1;}} return -1;}\n\n/*===============================================================*/\n\n/*  Special puropose functions */\n\n// ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\n// ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\n// void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\n// ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\n// ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\n// bool revsort(ll a, ll b) {return a > b;}\n// void swap(int &x, int &y) {int temp = x; x = y; y = temp;}\n// ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\n// void google(int t) {cout << \"Case #\" << t << \": \";}\n// vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\n// ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\n// ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\n// ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\n// ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\n// ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\n// ll lcm(int a, int b){return (a / gcd(a, b)) * b;}\n\n/*=================================================================*/\n\n\nvoid solve() {\n\t\n\n}\n\n\nint main() {\n\tfastio();\n#ifndef ONLINE_JUDGE\n\tfreopen(\"error.txt\", \"w\", stderr);\n#endif\n\tauto start1 = high_resolution_clock::now();\n\tsolve();\n\tauto stop1 = high_resolution_clock::now();\n\tauto duration = duration_cast<microseconds>(stop1 - start1);\n#ifndef ONLINE_JUDGE\n\tcerr << \"Time: \" << duration . count() / 1000 << endl;\n#endif\n\treturn 0;\n}",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CPP_template()"
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQwAAAAAAAAAABBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "Blind 75/DP/7.House_Robber.cpp",
			"settings":
			{
				"buffer_size": 5394,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"insert_completion",
					{
						"completion": "/*\n\tA B H I S H E K    S I N G H\n*/\n\n#include<bits/stdc++.h>\nusing namespace std;\nusing namespace chrono;\n\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD 1000000007\n#define MOD1 998244353\n#define INF 1e18\n#define nline \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\n#define ff first\n#define ss second\n#define PI 3.141592653589793238462\n#define set_bits __builtin_popcountll\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define all_rev(x) (x).rbegin(), (x).rend()\n\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\n#else\n#define debug(x);\n#endif\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\n\n\n/*============================================================*/\n/*    debug() functions */\n\ntemplate <class T> void _print(T t) {cerr << t;}  \ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\n/*==============================================================*/\n/*    Newly added templates */\n\ntemplate <class T> void print_vec(vector<T> v);  //printing any vector\ntemplate <class T> void print_set(set<T> s);  //printing set of any datatype\ntemplate <class T> void input_vec(vector<T> &v , int n);  //taking input of n elements of any data type into a vector\ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item);  //binary search on vector\ntemplate <class T> void print_vec(vector<T> v){ for(T i:v){ cout<<i<<\" \";}cout<<nline;} \ntemplate <class T> void print_set(set<T> s){for(T i:s){cout<<i<<\" \";}cout<<nline;}  \ntemplate <class T> void input_vec(vector<T> &v , int n){for(int i=0;i<n;i++){int temp;cin>>temp;v.pb(temp);}}   \ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item){  V low = 0; V high = n - 1; while(low<=high){{V mid = (low + high)/2; if (a[mid] == item) return mid; else if (a[mid] < item) low = mid + 1; else high = mid - 1;}} return -1;}\n\n/*===============================================================*/\n\n/*  Special puropose functions */\n\n// ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\n// ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\n// void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\n// ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\n// ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\n// bool revsort(ll a, ll b) {return a > b;}\n// void swap(int &x, int &y) {int temp = x; x = y; y = temp;}\n// ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\n// void google(int t) {cout << \"Case #\" << t << \": \";}\n// vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\n// ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\n// ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\n// ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\n// ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\n// ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\n// ll lcm(int a, int b){return (a / gcd(a, b)) * b;}\n\n/*=================================================================*/\n\n\nvoid solve() {\n\t\n\n}\n\n\nint main() {\n\tfastio();\n#ifndef ONLINE_JUDGE\n\tfreopen(\"error.txt\", \"w\", stderr);\n#endif\n\tauto start1 = high_resolution_clock::now();\n\tsolve();\n\tauto stop1 = high_resolution_clock::now();\n\tauto duration = duration_cast<microseconds>(stop1 - start1);\n#ifndef ONLINE_JUDGE\n\tcerr << \"Time: \" << duration . count() / 1000 << endl;\n#endif\n\treturn 0;\n}",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CPP_template()"
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQwAAAAAAAAAABBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAJMSAAAAAAAAvhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxIAAAAAAACTEgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					4,
					"left_delete",
					null,
					"BAAAALwSAAAAAAAAvBIAAAAAAAABAAAAILsSAAAAAAAAuxIAAAAAAAABAAAAILoSAAAAAAAAuhIAAAAAAAABAAAAILkSAAAAAAAAuRIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAvRIAAAAAAAC9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\titn"
					},
					"BAAAAMsSAAAAAAAAzBIAAAAAAAAAAAAAzBIAAAAAAADNEgAAAAAAAAAAAADNEgAAAAAAAM4SAAAAAAAAAAAAAM4SAAAAAAAAzxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyxIAAAAAAADLEgAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAM8SAAAAAAAA0BIAAAAAAAAAAAAA0BIAAAAAAADREgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzxIAAAAAAADPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					4,
					"left_delete",
					null,
					"BAAAANASAAAAAAAA0BIAAAAAAAABAAAAbs8SAAAAAAAAzxIAAAAAAAABAAAAIM4SAAAAAAAAzhIAAAAAAAABAAAAbs0SAAAAAAAAzRIAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAA0RIAAAAAAADREgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"AgAAAM0SAAAAAAAAzhIAAAAAAAAAAAAAzhIAAAAAAADPEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRIAAAAAAADNEgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " n;"
					},
					"AwAAAM8SAAAAAAAA0BIAAAAAAAAAAAAA0BIAAAAAAADREgAAAAAAAAAAAADREgAAAAAAANISAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzxIAAAAAAADPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\ncin"
					},
					"BQAAANISAAAAAAAA0xIAAAAAAAAAAAAA0xIAAAAAAADUEgAAAAAAAAAAAADUEgAAAAAAANUSAAAAAAAAAAAAANUSAAAAAAAA1hIAAAAAAAAAAAAA1hIAAAAAAADXEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0hIAAAAAAADSEgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANcSAAAAAAAA2BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xIAAAAAAADXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAANcSAAAAAAAA1xIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA2BIAAAAAAADYEgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ">>n;"
					},
					"BAAAANcSAAAAAAAA2BIAAAAAAAAAAAAA2BIAAAAAAADZEgAAAAAAAAAAAADZEgAAAAAAANoSAAAAAAAAAAAAANoSAAAAAAAA2xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xIAAAAAAADXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\nvector<i"
					},
					"CgAAANsSAAAAAAAA3BIAAAAAAAAAAAAA3BIAAAAAAADdEgAAAAAAAAAAAADdEgAAAAAAAN4SAAAAAAAAAAAAAN4SAAAAAAAA3xIAAAAAAAAAAAAA3xIAAAAAAADgEgAAAAAAAAAAAADgEgAAAAAAAOESAAAAAAAAAAAAAOESAAAAAAAA4hIAAAAAAAAAAAAA4hIAAAAAAADjEgAAAAAAAAAAAADjEgAAAAAAAOQSAAAAAAAAAAAAAOQSAAAAAAAA5RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xIAAAAAAADbEgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"AgAAAOUSAAAAAAAA5hIAAAAAAAAAAAAA5hIAAAAAAADnEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RIAAAAAAADlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOcSAAAAAAAA6BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xIAAAAAAADnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAAOcSAAAAAAAA5xIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA6BIAAAAAAADoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAOcSAAAAAAAA6BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xIAAAAAAADnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " arr;"
					},
					"BQAAAOgSAAAAAAAA6RIAAAAAAAAAAAAA6RIAAAAAAADqEgAAAAAAAAAAAADqEgAAAAAAAOsSAAAAAAAAAAAAAOsSAAAAAAAA7BIAAAAAAAAAAAAA7BIAAAAAAADtEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BIAAAAAAADoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\ninp"
					},
					"BQAAAO0SAAAAAAAA7hIAAAAAAAAAAAAA7hIAAAAAAADvEgAAAAAAAAAAAADvEgAAAAAAAPASAAAAAAAAAAAAAPASAAAAAAAA8RIAAAAAAAAAAAAA8RIAAAAAAADyEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7RIAAAAAAADtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert_completion",
					{
						"completion": "input_vec",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "input_vec"
					},
					"AgAAAO8SAAAAAAAA7xIAAAAAAAADAAAAaW5w7xIAAAAAAAD4EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hIAAAAAAADyEgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPgSAAAAAAAA+hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+BIAAAAAAAD4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "arr,n"
					},
					"BQAAAPkSAAAAAAAA+hIAAAAAAAAAAAAA+hIAAAAAAAD7EgAAAAAAAAAAAAD7EgAAAAAAAPwSAAAAAAAAAAAAAPwSAAAAAAAA/RIAAAAAAAAAAAAA/RIAAAAAAAD+EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RIAAAAAAAD5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAP8SAAAAAAAAABMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/xIAAAAAAAD/EgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\nron"
					},
					"BQAAAAATAAAAAAAAARMAAAAAAAAAAAAAARMAAAAAAAACEwAAAAAAAAAAAAACEwAAAAAAAAMTAAAAAAAAAAAAAAMTAAAAAAAABBMAAAAAAAAAAAAABBMAAAAAAAAFEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAABMAAAAAAAAAEwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					3,
					"left_delete",
					null,
					"AwAAAAQTAAAAAAAABBMAAAAAAAABAAAAbgMTAAAAAAAAAxMAAAAAAAABAAAAbwITAAAAAAAAAhMAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAABRMAAAAAAAAFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "cout<<Rob"
					},
					"CQAAAAITAAAAAAAAAxMAAAAAAAAAAAAAAxMAAAAAAAAEEwAAAAAAAAAAAAAEEwAAAAAAAAUTAAAAAAAAAAAAAAUTAAAAAAAABhMAAAAAAAAAAAAABhMAAAAAAAAHEwAAAAAAAAAAAAAHEwAAAAAAAAgTAAAAAAAAAAAAAAgTAAAAAAAACRMAAAAAAAAAAAAACRMAAAAAAAAKEwAAAAAAAAAAAAAKEwAAAAAAAAsTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhMAAAAAAAACEwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					3,
					"left_delete",
					null,
					"AwAAAAoTAAAAAAAAChMAAAAAAAABAAAAYgkTAAAAAAAACRMAAAAAAAABAAAAbwgTAAAAAAAACBMAAAAAAAABAAAAUg",
					"AQAAAAAAAAABAAAACxMAAAAAAAALEwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "rp"
					},
					"AgAAAAgTAAAAAAAACRMAAAAAAAAAAAAACRMAAAAAAAAKEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACBMAAAAAAAAIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAAkTAAAAAAAACRMAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAChMAAAAAAAAKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "onb"
					},
					"AwAAAAkTAAAAAAAAChMAAAAAAAAAAAAAChMAAAAAAAALEwAAAAAAAAAAAAALEwAAAAAAAAwTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRMAAAAAAAAJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAAAsTAAAAAAAACxMAAAAAAAABAAAAYgoTAAAAAAAAChMAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAADBMAAAAAAAAMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAAoTAAAAAAAACxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAChMAAAAAAAAKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAsTAAAAAAAADRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxMAAAAAAAALEwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "arr"
					},
					"AwAAAAwTAAAAAAAADRMAAAAAAAAAAAAADRMAAAAAAAAOEwAAAAAAAAAAAAAOEwAAAAAAAA8TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBMAAAAAAAAMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABATAAAAAAAAERMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBMAAAAAAAAQEwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "M+"
					},
					"AgAAABATAAAAAAAAERMAAAAAAAAAAAAAERMAAAAAAAASEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBMAAAAAAAAQEwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					2,
					"left_delete",
					null,
					"AgAAABETAAAAAAAAERMAAAAAAAABAAAAKxATAAAAAAAAEBMAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAEhMAAAAAAAASEwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "NN"
					},
					"AgAAABATAAAAAAAAERMAAAAAAAAAAAAAERMAAAAAAAASEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBMAAAAAAAAQEwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					2,
					"left_delete",
					null,
					"AgAAABETAAAAAAAAERMAAAAAAAABAAAAThATAAAAAAAAEBMAAAAAAAABAAAATg",
					"AQAAAAAAAAABAAAAEhMAAAAAAAASEwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "<<nl"
					},
					"BAAAABATAAAAAAAAERMAAAAAAAAAAAAAERMAAAAAAAASEwAAAAAAAAAAAAASEwAAAAAAABMTAAAAAAAAAAAAABMTAAAAAAAAFBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBMAAAAAAAAQEwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert_completion",
					{
						"completion": "nline",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nline"
					},
					"AgAAABITAAAAAAAAEhMAAAAAAAACAAAAbmwSEwAAAAAAABcTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBMAAAAAAAAUEwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALgSAAAAAAAAuRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBIAAAAAAAC4EgAAAAAAAAAAAAAAwGlA"
				],
				[
					52,
					3,
					"left_delete",
					null,
					"AwAAALgSAAAAAAAAuBIAAAAAAAABAAAACbcSAAAAAAAAtxIAAAAAAAABAAAAILYSAAAAAAAAthIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAuRIAAAAAAAC5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "fir==="
					},
					"BgAAALYSAAAAAAAAtxIAAAAAAAAAAAAAtxIAAAAAAAC4EgAAAAAAAAAAAAC4EgAAAAAAALkSAAAAAAAAAAAAALkSAAAAAAAAuhIAAAAAAAAAAAAAuhIAAAAAAAC7EgAAAAAAAAAAAAC7EgAAAAAAALwSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthIAAAAAAAC2EgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					6,
					"left_delete",
					null,
					"BgAAALsSAAAAAAAAuxIAAAAAAAABAAAAPboSAAAAAAAAuhIAAAAAAAABAAAAPbkSAAAAAAAAuRIAAAAAAAABAAAAPbgSAAAAAAAAuBIAAAAAAAABAAAAcrcSAAAAAAAAtxIAAAAAAAABAAAAabYSAAAAAAAAthIAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAvBIAAAAAAAC8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJMSAAAAAAAAlBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxIAAAAAAACTEgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "itn"
					},
					"AwAAAJMSAAAAAAAAlBIAAAAAAAAAAAAAlBIAAAAAAACVEgAAAAAAAAAAAACVEgAAAAAAAJYSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxIAAAAAAACTEgAAAAAAAAAAAAAAAAAA"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAJYSAAAAAAAAlxIAAAAAAAAAAAAAlxIAAAAAAACYEgAAAAAAAAAAAACYEgAAAAAAAJkSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhIAAAAAAACWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					5,
					"left_delete",
					null,
					"BQAAAJgSAAAAAAAAmBIAAAAAAAABAAAAb5cSAAAAAAAAlxIAAAAAAAABAAAAdJYSAAAAAAAAlhIAAAAAAAABAAAAIJUSAAAAAAAAlRIAAAAAAAABAAAAbpQSAAAAAAAAlBIAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAmRIAAAAAAACZEgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"AgAAAJQSAAAAAAAAlRIAAAAAAAAAAAAAlRIAAAAAAACWEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlBIAAAAAAACUEgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " o"
					},
					"AgAAAJYSAAAAAAAAlxIAAAAAAAAAAAAAlxIAAAAAAACYEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhIAAAAAAACWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"left_delete",
					null,
					"AQAAAJcSAAAAAAAAlxIAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAmBIAAAAAAACYEgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "rob_Hel"
					},
					"BwAAAJcSAAAAAAAAmBIAAAAAAAAAAAAAmBIAAAAAAACZEgAAAAAAAAAAAACZEgAAAAAAAJoSAAAAAAAAAAAAAJoSAAAAAAAAmxIAAAAAAAAAAAAAmxIAAAAAAACcEgAAAAAAAAAAAACcEgAAAAAAAJ0SAAAAAAAAAAAAAJ0SAAAAAAAAnhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxIAAAAAAACXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "e="
					},
					"AgAAAJ4SAAAAAAAAnxIAAAAAAAAAAAAAnxIAAAAAAACgEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhIAAAAAAACeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					2,
					"left_delete",
					null,
					"AgAAAJ8SAAAAAAAAnxIAAAAAAAABAAAAPZ4SAAAAAAAAnhIAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAoBIAAAAAAACgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "per"
					},
					"AwAAAJ4SAAAAAAAAnxIAAAAAAAAAAAAAnxIAAAAAAACgEgAAAAAAAAAAAACgEgAAAAAAAKESAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhIAAAAAAACeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKESAAAAAAAAoxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRIAAAAAAAChEgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "vecot"
					},
					"BQAAAKISAAAAAAAAoxIAAAAAAAAAAAAAoxIAAAAAAACkEgAAAAAAAAAAAACkEgAAAAAAAKUSAAAAAAAAAAAAAKUSAAAAAAAAphIAAAAAAAAAAAAAphIAAAAAAACnEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohIAAAAAAACiEgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					2,
					"left_delete",
					null,
					"AgAAAKYSAAAAAAAAphIAAAAAAAABAAAAdKUSAAAAAAAApRIAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAApxIAAAAAAACnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "tor<ont"
					},
					"BwAAAKUSAAAAAAAAphIAAAAAAAAAAAAAphIAAAAAAACnEgAAAAAAAAAAAACnEgAAAAAAAKgSAAAAAAAAAAAAAKgSAAAAAAAAqRIAAAAAAAAAAAAAqRIAAAAAAACqEgAAAAAAAAAAAACqEgAAAAAAAKsSAAAAAAAAAAAAAKsSAAAAAAAArBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApRIAAAAAAAClEgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					3,
					"left_delete",
					null,
					"AwAAAKsSAAAAAAAAqxIAAAAAAAABAAAAdKoSAAAAAAAAqhIAAAAAAAABAAAAbqkSAAAAAAAAqRIAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAArBIAAAAAAACsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAKkSAAAAAAAAqhIAAAAAAAAAAAAAqhIAAAAAAACrEgAAAAAAAAAAAACrEgAAAAAAAKwSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRIAAAAAAACpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwSAAAAAAAArRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBIAAAAAAACsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAAKwSAAAAAAAArBIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAArRIAAAAAAACtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAKwSAAAAAAAArRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBIAAAAAAACsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAK0SAAAAAAAArhIAAAAAAAAAAAAArhIAAAAAAACvEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRIAAAAAAACtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					2,
					"left_delete",
					null,
					"AgAAAK4SAAAAAAAArhIAAAAAAAABAAAAIK0SAAAAAAAArRIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAArxIAAAAAAACvEgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAK0SAAAAAAAArhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRIAAAAAAACtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " u"
					},
					"AgAAAK4SAAAAAAAArxIAAAAAAAAAAAAArxIAAAAAAACwEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArhIAAAAAAACuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"left_delete",
					null,
					"AQAAAK8SAAAAAAAArxIAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAsBIAAAAAAACwEgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "nums"
					},
					"BAAAAK8SAAAAAAAAsBIAAAAAAAAAAAAAsBIAAAAAAACxEgAAAAAAAAAAAACxEgAAAAAAALISAAAAAAAAAAAAALISAAAAAAAAsxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxIAAAAAAACvEgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": ",in"
					},
					"AwAAALMSAAAAAAAAtBIAAAAAAAAAAAAAtBIAAAAAAAC1EgAAAAAAAAAAAAC1EgAAAAAAALYSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsxIAAAAAAACzEgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " tn"
					},
					"AwAAALYSAAAAAAAAtxIAAAAAAAAAAAAAtxIAAAAAAAC4EgAAAAAAAAAAAAC4EgAAAAAAALkSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthIAAAAAAAC2EgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					3,
					"left_delete",
					null,
					"AwAAALgSAAAAAAAAuBIAAAAAAAABAAAAbrcSAAAAAAAAtxIAAAAAAAABAAAAdLYSAAAAAAAAthIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAuRIAAAAAAAC5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAALYSAAAAAAAAtxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthIAAAAAAAC2EgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " ind"
					},
					"BAAAALcSAAAAAAAAuBIAAAAAAAAAAAAAuBIAAAAAAAC5EgAAAAAAAAAAAAC5EgAAAAAAALoSAAAAAAAAAAAAALoSAAAAAAAAuxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxIAAAAAAAC3EgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAALwSAAAAAAAAvRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvBIAAAAAAAC8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"left_delete",
					null,
					"AQAAALwSAAAAAAAAvBIAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAvRIAAAAAAAC9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALwSAAAAAAAAvhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvBIAAAAAAAC8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAL0SAAAAAAAAvhIAAAAAAAAAAAAAvhIAAAAAAAC/EgAAAAAAAAAAAAC+EgAAAAAAAL8SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRIAAAAAAAC9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAL8SAAAAAAAAwBIAAAAAAAAAAAAAwBIAAAAAAADBEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxIAAAAAAAC/EgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMESAAAAAAAAwxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwRIAAAAAAADBEgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAMISAAAAAAAAwxIAAAAAAAAAAAAAwxIAAAAAAADEEgAAAAAAAAAAAADEEgAAAAAAAMUSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhIAAAAAAADCEgAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAAMQSAAAAAAAAxBIAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAxRIAAAAAAADFEgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "d>"
					},
					"AgAAAMQSAAAAAAAAxRIAAAAAAAAAAAAAxRIAAAAAAADGEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBIAAAAAAADEEgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "=nums"
					},
					"BQAAAMYSAAAAAAAAxxIAAAAAAAAAAAAAxxIAAAAAAADIEgAAAAAAAAAAAADIEgAAAAAAAMkSAAAAAAAAAAAAAMkSAAAAAAAAyhIAAAAAAAAAAAAAyhIAAAAAAADLEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxhIAAAAAAADGEgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": ".szie"
					},
					"BQAAAMsSAAAAAAAAzBIAAAAAAAAAAAAAzBIAAAAAAADNEgAAAAAAAAAAAADNEgAAAAAAAM4SAAAAAAAAAAAAAM4SAAAAAAAAzxIAAAAAAAAAAAAAzxIAAAAAAADQEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyxIAAAAAAADLEgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					3,
					"left_delete",
					null,
					"AwAAAM8SAAAAAAAAzxIAAAAAAAABAAAAZc4SAAAAAAAAzhIAAAAAAAABAAAAac0SAAAAAAAAzRIAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAA0BIAAAAAAADQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "ize"
					},
					"AwAAAM0SAAAAAAAAzhIAAAAAAAAAAAAAzhIAAAAAAADPEgAAAAAAAAAAAADPEgAAAAAAANASAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRIAAAAAAADNEgAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANASAAAAAAAA0hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0BIAAAAAAADQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAANASAAAAAAAA0BIAAAAAAAABAAAAKNASAAAAAAAA0BIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA0RIAAAAAAADREgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					8,
					"left_delete",
					null,
					"CAAAAM8SAAAAAAAAzxIAAAAAAAABAAAAZc4SAAAAAAAAzhIAAAAAAAABAAAAes0SAAAAAAAAzRIAAAAAAAABAAAAacwSAAAAAAAAzBIAAAAAAAABAAAAc8sSAAAAAAAAyxIAAAAAAAABAAAALsoSAAAAAAAAyhIAAAAAAAABAAAAc8kSAAAAAAAAyRIAAAAAAAABAAAAbcgSAAAAAAAAyBIAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA0BIAAAAAAADQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CgAAAMkSAAAAAAAAyhIAAAAAAAAAAAAAyhIAAAAAAADLEgAAAAAAAAAAAADKEgAAAAAAAMoSAAAAAAAAAQAAAAnKEgAAAAAAAMwSAAAAAAAAAAAAAMwSAAAAAAAAzRIAAAAAAAAAAAAAzRIAAAAAAADOEgAAAAAAAAAAAADOEgAAAAAAAM8SAAAAAAAAAAAAAM8SAAAAAAAA0BIAAAAAAAAAAAAA0BIAAAAAAADREgAAAAAAAAAAAADREgAAAAAAANISAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyRIAAAAAAADJEgAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " 0;"
					},
					"AwAAANISAAAAAAAA0xIAAAAAAAAAAAAA0xIAAAAAAADUEgAAAAAAAAAAAADUEgAAAAAAANUSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0hIAAAAAAADSEgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "rob"
					},
					"AwAAAPsSAAAAAAAA/BIAAAAAAAAAAAAA/BIAAAAAAAD9EgAAAAAAAAAAAAD9EgAAAAAAAP4SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xIAAAAAAAD7EgAAAAAAAAAAAAAAgGFA"
				],
				[
					113,
					1,
					"insert_completion",
					{
						"completion": "rob_Helper",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "rob_Helper"
					},
					"AgAAAPsSAAAAAAAA+xIAAAAAAAADAAAAcm9i+xIAAAAAAAAFEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/hIAAAAAAAD+EgAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAUTAAAAAAAABxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABRMAAAAAAAAFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "retinr"
					},
					"BgAAAPsSAAAAAAAA/BIAAAAAAAAAAAAA/BIAAAAAAAD9EgAAAAAAAAAAAAD9EgAAAAAAAP4SAAAAAAAAAAAAAP4SAAAAAAAA/xIAAAAAAAAAAAAA/xIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xIAAAAAAAD7EgAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					3,
					"left_delete",
					null,
					"AwAAAAATAAAAAAAAABMAAAAAAAABAAAAcv8SAAAAAAAA/xIAAAAAAAABAAAAbv4SAAAAAAAA/hIAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAARMAAAAAAAABEwAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "urn"
					},
					"AwAAAP4SAAAAAAAA/xIAAAAAAAAAAAAA/xIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/hIAAAAAAAD+EgAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAETAAAAAAAAAhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAARMAAAAAAAABEwAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "nums,"
					},
					"BQAAAA0TAAAAAAAADhMAAAAAAAAAAAAADhMAAAAAAAAPEwAAAAAAAAAAAAAPEwAAAAAAABATAAAAAAAAAAAAABATAAAAAAAAERMAAAAAAAAAAAAAERMAAAAAAAASEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRMAAAAAAAANEwAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "0,"
					},
					"AgAAABITAAAAAAAAExMAAAAAAAAAAAAAExMAAAAAAAAUEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEhMAAAAAAAASEwAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "nums,"
					},
					"BQAAABQTAAAAAAAAFRMAAAAAAAAAAAAAFRMAAAAAAAAWEwAAAAAAAAAAAAAWEwAAAAAAABcTAAAAAAAAAAAAABcTAAAAAAAAGBMAAAAAAAAAAAAAGBMAAAAAAAAZEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBMAAAAAAAAUEwAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"left_delete",
					null,
					"AQAAABgTAAAAAAAAGBMAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAGRMAAAAAAAAZEwAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": ".szie"
					},
					"BQAAABgTAAAAAAAAGRMAAAAAAAAAAAAAGRMAAAAAAAAaEwAAAAAAAAAAAAAaEwAAAAAAABsTAAAAAAAAAAAAABsTAAAAAAAAHBMAAAAAAAAAAAAAHBMAAAAAAAAdEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGBMAAAAAAAAYEwAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					3,
					"left_delete",
					null,
					"AwAAABwTAAAAAAAAHBMAAAAAAAABAAAAZRsTAAAAAAAAGxMAAAAAAAABAAAAaRoTAAAAAAAAGhMAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAAHRMAAAAAAAAdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "zie"
					},
					"AwAAABoTAAAAAAAAGxMAAAAAAAAAAAAAGxMAAAAAAAAcEwAAAAAAAAAAAAAcEwAAAAAAAB0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhMAAAAAAAAaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					3,
					"left_delete",
					null,
					"AwAAABwTAAAAAAAAHBMAAAAAAAABAAAAZRsTAAAAAAAAGxMAAAAAAAABAAAAaRoTAAAAAAAAGhMAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAAHRMAAAAAAAAdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "ize"
					},
					"AwAAABoTAAAAAAAAGxMAAAAAAAAAAAAAGxMAAAAAAAAcEwAAAAAAAAAAAAAcEwAAAAAAAB0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhMAAAAAAAAaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB0TAAAAAAAAHxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHRMAAAAAAAAdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACATAAAAAAAAIRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIBMAAAAAAAAgEwAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAANUSAAAAAAAA1hIAAAAAAAAAAAAA1hIAAAAAAADYEgAAAAAAAAAAAADWEgAAAAAAANYSAAAAAAAAAgAAAAkJ1hIAAAAAAADXEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1RIAAAAAAADVEgAAAAAAAAAAAAAAsHZA"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "ans"
					},
					"AwAAANcSAAAAAAAA2BIAAAAAAAAAAAAA2BIAAAAAAADZEgAAAAAAAAAAAADZEgAAAAAAANoSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xIAAAAAAADXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					3,
					"left_delete",
					null,
					"AwAAANkSAAAAAAAA2RIAAAAAAAABAAAAc9gSAAAAAAAA2BIAAAAAAAABAAAAbtcSAAAAAAAA1xIAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAA2hIAAAAAAADaEgAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAANcSAAAAAAAA2BIAAAAAAAAAAAAA2BIAAAAAAADZEgAAAAAAAAAAAADZEgAAAAAAANoSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xIAAAAAAADXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": " ans"
					},
					"BAAAANoSAAAAAAAA2xIAAAAAAAAAAAAA2xIAAAAAAADcEgAAAAAAAAAAAADcEgAAAAAAAN0SAAAAAAAAAAAAAN0SAAAAAAAA3hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hIAAAAAAADaEgAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAN4SAAAAAAAA3xIAAAAAAAAAAAAA3xIAAAAAAADgEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hIAAAAAAADeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOASAAAAAAAA4RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BIAAAAAAADgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "INT"
					},
					"AwAAAOESAAAAAAAA4hIAAAAAAAAAAAAA4hIAAAAAAADjEgAAAAAAAAAAAADjEgAAAAAAAOQSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RIAAAAAAADhEgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert_completion",
					{
						"completion": "INT_MIN",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "INT_MIN"
					},
					"AgAAAOESAAAAAAAA4RIAAAAAAAADAAAASU5U4RIAAAAAAADoEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BIAAAAAAADkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOgSAAAAAAAA6RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BIAAAAAAADoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "\nans"
					},
					"BQAAAOkSAAAAAAAA6hIAAAAAAAAAAAAA6hIAAAAAAADrEgAAAAAAAAAAAADrEgAAAAAAAOwSAAAAAAAAAAAAAOwSAAAAAAAA7RIAAAAAAAAAAAAA7RIAAAAAAADuEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RIAAAAAAADpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAO4SAAAAAAAA7xIAAAAAAAAAAAAA7xIAAAAAAADwEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7hIAAAAAAADuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": " ans"
					},
					"BAAAAPASAAAAAAAA8RIAAAAAAAAAAAAA8RIAAAAAAADyEgAAAAAAAAAAAADyEgAAAAAAAPMSAAAAAAAAAAAAAPMSAAAAAAAA9BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BIAAAAAAADwEgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					3,
					"left_delete",
					null,
					"AwAAAPMSAAAAAAAA8xIAAAAAAAABAAAAc/ISAAAAAAAA8hIAAAAAAAABAAAAbvESAAAAAAAA8RIAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAA9BIAAAAAAAD0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "maz"
					},
					"AwAAAPESAAAAAAAA8hIAAAAAAAAAAAAA8hIAAAAAAADzEgAAAAAAAAAAAADzEgAAAAAAAPQSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RIAAAAAAADxEgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"left_delete",
					null,
					"AQAAAPMSAAAAAAAA8xIAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAA9BIAAAAAAAD0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAPMSAAAAAAAA9BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8xIAAAAAAADzEgAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPQSAAAAAAAA9hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BIAAAAAAAD0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "ans,"
					},
					"BAAAAPUSAAAAAAAA9hIAAAAAAAAAAAAA9hIAAAAAAAD3EgAAAAAAAAAAAAD3EgAAAAAAAPgSAAAAAAAAAAAAAPgSAAAAAAAA+RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9RIAAAAAAAD1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOgSAAAAAAAA6RIAAAAAAAAAAAAA6RIAAAAAAADqEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BIAAAAAAADoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					3,
					"left_delete",
					null,
					"AwAAAOkSAAAAAAAA6RIAAAAAAAABAAAACegSAAAAAAAA6BIAAAAAAAABAAAACucSAAAAAAAA5xIAAAAAAAABAAAATg",
					"AQAAAAAAAAABAAAA6hIAAAAAAADqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAOcSAAAAAAAA6BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xIAAAAAAADnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"left_delete",
					null,
					"AQAAAOcSAAAAAAAA5xIAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAA6BIAAAAAAADoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "N"
					},
					"AQAAAOcSAAAAAAAA6BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xIAAAAAAADnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "\nfopr"
					},
					"BgAAAOkSAAAAAAAA6hIAAAAAAAAAAAAA6hIAAAAAAADrEgAAAAAAAAAAAADrEgAAAAAAAOwSAAAAAAAAAAAAAOwSAAAAAAAA7RIAAAAAAAAAAAAA7RIAAAAAAADuEgAAAAAAAAAAAADuEgAAAAAAAO8SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RIAAAAAAADpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					2,
					"left_delete",
					null,
					"AgAAAO4SAAAAAAAA7hIAAAAAAAABAAAAcu0SAAAAAAAA7RIAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA7xIAAAAAAADvEgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAO0SAAAAAAAA7hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7RIAAAAAAADtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAO4SAAAAAAAA8BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7hIAAAAAAADuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAO8SAAAAAAAA8BIAAAAAAAAAAAAA8BIAAAAAAADxEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xIAAAAAAADvEgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " ti"
					},
					"AwAAAPESAAAAAAAA8hIAAAAAAAAAAAAA8hIAAAAAAADzEgAAAAAAAAAAAADzEgAAAAAAAPQSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RIAAAAAAADxEgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					3,
					"left_delete",
					null,
					"AwAAAPMSAAAAAAAA8xIAAAAAAAABAAAAafISAAAAAAAA8hIAAAAAAAABAAAAdPESAAAAAAAA8RIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA9BIAAAAAAAD0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAPESAAAAAAAA8hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RIAAAAAAADxEgAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": " i=0;i<"
					},
					"BwAAAPISAAAAAAAA8xIAAAAAAAAAAAAA8xIAAAAAAAD0EgAAAAAAAAAAAAD0EgAAAAAAAPUSAAAAAAAAAAAAAPUSAAAAAAAA9hIAAAAAAAAAAAAA9hIAAAAAAAD3EgAAAAAAAAAAAAD3EgAAAAAAAPgSAAAAAAAAAAAAAPgSAAAAAAAA+RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hIAAAAAAADyEgAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "n;i"
					},
					"AwAAAPkSAAAAAAAA+hIAAAAAAAAAAAAA+hIAAAAAAAD7EgAAAAAAAAAAAAD7EgAAAAAAAPwSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RIAAAAAAAD5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "++"
					},
					"AgAAAPwSAAAAAAAA/RIAAAAAAAAAAAAA/RIAAAAAAAD+EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/BIAAAAAAAD8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAP8SAAAAAAAAARMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/xIAAAAAAAD/EgAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAAATAAAAAAAAARMAAAAAAAAAAAAAARMAAAAAAAACEwAAAAAAAAAAAAACEwAAAAAAAAMTAAAAAAAAAAAAAAMTAAAAAAAABBMAAAAAAAAAAAAAARMAAAAAAAABEwAAAAAAAAEAAAAJARMAAAAAAAADEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAABMAAAAAAAAAEwAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					17,
					"left_delete",
					null,
					"EgAAABYTAAAAAAAAFhMAAAAAAAABAAAAKQETAAAAAAAAARMAAAAAAAACAAAACQkTEwAAAAAAABMTAAAAAAAAAQAAACwSEwAAAAAAABITAAAAAAAAAQAAAHMREwAAAAAAABETAAAAAAAAAQAAAG4QEwAAAAAAABATAAAAAAAAAQAAAGEPEwAAAAAAAA8TAAAAAAAAAQAAACgOEwAAAAAAAA4TAAAAAAAAAQAAAHgNEwAAAAAAAA0TAAAAAAAAAQAAAGEMEwAAAAAAAAwTAAAAAAAAAQAAAG0LEwAAAAAAAAsTAAAAAAAAAQAAACAKEwAAAAAAAAoTAAAAAAAAAQAAAD0JEwAAAAAAAAkTAAAAAAAAAQAAACAIEwAAAAAAAAgTAAAAAAAAAQAAAHMHEwAAAAAAAAcTAAAAAAAAAQAAAG4GEwAAAAAAAAYTAAAAAAAAAQAAAGEFEwAAAAAAAAUTAAAAAAAAAQAAAAkEEwAAAAAAAAQTAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAFxMAAAAAAAAXEwAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"reindent",
					null,
					"AQAAAAETAAAAAAAAAxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAARMAAAAAAAABEwAAAAAAAAAAAAAAgERA"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "ans+="
					},
					"BQAAAAMTAAAAAAAABBMAAAAAAAAAAAAABBMAAAAAAAAFEwAAAAAAAAAAAAAFEwAAAAAAAAYTAAAAAAAAAAAAAAYTAAAAAAAABxMAAAAAAAAAAAAABxMAAAAAAAAIEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAxMAAAAAAAADEwAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " max"
					},
					"BAAAAAgTAAAAAAAACRMAAAAAAAAAAAAACRMAAAAAAAAKEwAAAAAAAAAAAAAKEwAAAAAAAAsTAAAAAAAAAAAAAAsTAAAAAAAADBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACBMAAAAAAAAIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAwTAAAAAAAADhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBMAAAAAAAAMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "ro"
					},
					"AgAAAA0TAAAAAAAADhMAAAAAAAAAAAAADhMAAAAAAAAPEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRMAAAAAAAANEwAAAAAAAAAAAAAAgGJA"
				],
				[
					187,
					1,
					"insert_completion",
					{
						"completion": "rob",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "rob"
					},
					"AgAAAA0TAAAAAAAADRMAAAAAAAACAAAAcm8NEwAAAAAAABATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxMAAAAAAAAPEwAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAABATAAAAAAAAERMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBMAAAAAAAAQEwAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert_completion",
					{
						"completion": "rob_Helper",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "rob_Helper"
					},
					"AgAAAA0TAAAAAAAADRMAAAAAAAAEAAAAcm9iSA0TAAAAAAAAFxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERMAAAAAAAAREwAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABcTAAAAAAAAGRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFxMAAAAAAAAXEwAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"left_delete",
					null,
					"AQAAAAMTAAAAAAAAAxMAAAAAAAAXAAAAYW5zKz0gbWF4KHJvYl9IZWxwZXIoKSk",
					"AQAAAAAAAAABAAAAGhMAAAAAAAADEwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "/*\n\tA B H I S H E K    S I N G H\n*/\n\n#include<bits/stdc++.h>\nusing namespace std;\nusing namespace chrono;\n\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD 1000000007\n#define MOD1 998244353\n#define INF 1e18\n#define nline \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\n#define ff first\n#define ss second\n#define PI 3.141592653589793238462\n#define set_bits __builtin_popcountll\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define all_rev(x) (x).rbegin(), (x).rend()\n\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\n#else\n#define debug(x);\n#endif\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\n\n\n/*============================================================*/\n/*    debug() functions */\n\ntemplate <class T> void _print(T t) {cerr << t;}  \ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\n/*==============================================================*/\n/*    Newly added templates */\n\ntemplate <class T> void print_vec(vector<T> v);  //printing any vector\ntemplate <class T> void print_set(set<T> s);  //printing set of any datatype\ntemplate <class T> void input_vec(vector<T> &v , int n);  //taking input of n elements of any data type into a vector\ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item);  //binary search on vector\ntemplate <class T> void print_vec(vector<T> v){ for(T i:v){ cout<<i<<\" \";}cout<<nline;} \ntemplate <class T> void print_set(set<T> s){for(T i:s){cout<<i<<\" \";}cout<<nline;}  \ntemplate <class T> void input_vec(vector<T> &v , int n){for(int i=0;i<n;i++){int temp;cin>>temp;v.pb(temp);}}   \ntemplate <class T, class V, class X>V binarySearch(vector<T> a, V n, X item){  V low = 0; V high = n - 1; while(low<=high){{V mid = (low + high)/2; if (a[mid] == item) return mid; else if (a[mid] < item) low = mid + 1; else high = mid - 1;}} return -1;}\n\n/*===============================================================*/\n\n/*  Special puropose functions */\n\n// ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\n// ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\n// void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\n// ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\n// ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\n// bool revsort(ll a, ll b) {return a > b;}\n// void swap(int &x, int &y) {int temp = x; x = y; y = temp;}\n// ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\n// void google(int t) {cout << \"Case #\" << t << \": \";}\n// vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\n// ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\n// ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\n// ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\n// ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\n// ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\n// ll lcm(int a, int b){return (a / gcd(a, b)) * b;}\n\n/*=================================================================*/\n\nint combinationSum4(vector<int>& nums, int target,vector<int>& memo) {\n\t/*\n\t\tThis is similar to the number of ways in which one can make amount target usign the denominations given.\n\t*/\n\tint ans=0;\n\tif(target<=0)\n\t\treturn 1;\n\tfor(int i=0;i<nums.size();i++){\n\t\tif(target-nums[i]>=0){\n\t\t\tif(memo[target-nums[i]]!=-1)\n\t\t\t\tans += memo[target-nums[i]];\n\t\t\telse\n\t\t\t\tans += combinationSum4(nums,target-nums[i],memo);\n\t\t}\n\t}\n\treturn memo[target]=ans;\n}\nint combinationSum4_DP(vector<int>& nums, int target){\n\tvector<int>dp(target+1,0);\n\tdp[0]=1;\n\tfor(int i=1;i<=target;i++){\n\t\tfor(int j:nums){\n\t\t\tif(i-j>=0)\n\t\t\t\tdp[i]+=dp[i-j];\n\t\t}\n\t}\n\treturn dp[target];\n}\nvoid solve() {\n\tint n,target;\n\tcin>>n>>target;\n\tvector<int> arr;\n\tinput_vec(arr,n);\t\n\tvector<int>memo(target+1,-1);\n\tcout<<combinationSum4(arr,target,memo)<<nline;\n\tcout<<combinationSum4_DP(arr,target)<<nline;\n}\n\n\nint main() {\n\tfastio();\n#ifndef ONLINE_JUDGE\n\tfreopen(\"error.txt\", \"w\", stderr);\n#endif\n\tauto start1 = high_resolution_clock::now();\n\tsolve();\n\tauto stop1 = high_resolution_clock::now();\n\tauto duration = duration_cast<microseconds>(stop1 - start1);\n#ifndef ONLINE_JUDGE\n\tcerr << \"Time: \" << duration . count() / 1000 << endl;\n#endif\n\treturn 0;\n}",
			"file": "Blind 75/DP/6.Combination_Sum.cpp",
			"file_size": 6106,
			"file_write_time": 133008846351533975,
			"settings":
			{
				"buffer_size": 5964,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nitn"
					},
					"BAAAAFAUAAAAAAAAURQAAAAAAAAAAAAAURQAAAAAAABSFAAAAAAAAAAAAABSFAAAAAAAAFMUAAAAAAAAAAAAAFMUAAAAAAAAVBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBQAAAAAAABQFAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFQUAAAAAAAAVRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBQAAAAAAABUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					3,
					"left_delete",
					null,
					"AwAAAFQUAAAAAAAAVBQAAAAAAAABAAAAIFMUAAAAAAAAUxQAAAAAAAABAAAAblIUAAAAAAAAUhQAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAVRQAAAAAAABVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"AgAAAFIUAAAAAAAAUxQAAAAAAAAAAAAAUxQAAAAAAABUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhQAAAAAAABSFAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " cp"
					},
					"AwAAAFQUAAAAAAAAVRQAAAAAAAAAAAAAVRQAAAAAAABWFAAAAAAAAAAAAABWFAAAAAAAAFcUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBQAAAAAAABUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAFYUAAAAAAAAVhQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAVxQAAAAAAABXFAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "ombi"
					},
					"BAAAAFYUAAAAAAAAVxQAAAAAAAAAAAAAVxQAAAAAAABYFAAAAAAAAAAAAABYFAAAAAAAAFkUAAAAAAAAAAAAAFkUAAAAAAAAWhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhQAAAAAAABWFAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "combinationSum4",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "combinationSum4"
					},
					"AgAAAFUUAAAAAAAAVRQAAAAAAAAFAAAAY29tYmlVFAAAAAAAAGQUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhQAAAAAAABaFAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "_Dp"
					},
					"AwAAAGQUAAAAAAAAZRQAAAAAAAAAAAAAZRQAAAAAAABmFAAAAAAAAAAAAABmFAAAAAAAAGcUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBQAAAAAAABkFAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAGYUAAAAAAAAZhQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAZxQAAAAAAABnFAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAGYUAAAAAAAAZxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhQAAAAAAABmFAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGcUAAAAAAAAaRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxQAAAAAAABnFAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAGgUAAAAAAAAlxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBQAAAAAAABoFAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					4,
					"left_delete",
					null,
					"BAAAAJYUAAAAAAAAlhQAAAAAAAABAAAAb5UUAAAAAAAAlRQAAAAAAAABAAAAbZQUAAAAAAAAlBQAAAAAAAABAAAAZZMUAAAAAAAAkxQAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAlxQAAAAAAACXFAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "dp"
					},
					"AgAAAJMUAAAAAAAAlBQAAAAAAAAAAAAAlBQAAAAAAACVFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxQAAAAAAACTFAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJYUAAAAAAAAmBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhQAAAAAAACWFAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAJcUAAAAAAAAmBQAAAAAAAAAAAAAmBQAAAAAAACZFAAAAAAAAAAAAACYFAAAAAAAAJkUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxQAAAAAAACXFAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"cut",
					null,
					"AQAAAIYUAAAAAAAAhhQAAAAAAAAPAAAAdmVjdG9yPGludD4mIGRw",
					"AQAAAAAAAAABAAAAlRQAAAAAAACGFAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AgAAAIUUAAAAAAAAhRQAAAAAAAABAAAALIgUAAAAAAAAiBQAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAhhQAAAAAAACGFAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"reindent",
					null,
					"AQAAAIgUAAAAAAAAiRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBQAAAAAAACIFAAAAAAAAAAAAAAA0HpA"
				],
				[
					32,
					1,
					"paste",
					null,
					"AQAAAIkUAAAAAAAAmBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiRQAAAAAAACJFAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAJQUAAAAAAAAlBQAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAlRQAAAAAAACVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAAJQUAAAAAAAAlBQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAlRQAAAAAAACVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJYUAAAAAAAAmBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhQAAAAAAACWFAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "tar"
					},
					"AwAAAJcUAAAAAAAAmBQAAAAAAAAAAAAAmBQAAAAAAACZFAAAAAAAAAAAAACZFAAAAAAAAJoUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxQAAAAAAACXFAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert_completion",
					{
						"completion": "target",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "target"
					},
					"AgAAAJcUAAAAAAAAlxQAAAAAAAADAAAAdGFylxQAAAAAAACdFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmhQAAAAAAACaFAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "+1,0"
					},
					"BAAAAJ0UAAAAAAAAnhQAAAAAAAAAAAAAnhQAAAAAAACfFAAAAAAAAAAAAACfFAAAAAAAAKAUAAAAAAAAAAAAAKAUAAAAAAAAoRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnRQAAAAAAACdFAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKIUAAAAAAAAoxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohQAAAAAAACiFAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKMUAAAAAAAApBQAAAAAAAAAAAAApBQAAAAAAAClFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxQAAAAAAACjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAKUUAAAAAAAAphQAAAAAAAAAAAAAphQAAAAAAACnFAAAAAAAAAAAAACnFAAAAAAAAKgUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApRQAAAAAAAClFAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					2,
					"left_delete",
					null,
					"AgAAAKcUAAAAAAAApxQAAAAAAAABAAAAcqYUAAAAAAAAphQAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAqBQAAAAAAACoFAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAKYUAAAAAAAApxQAAAAAAAAAAAAApxQAAAAAAACoFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphQAAAAAAACmFAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					3,
					"left_delete",
					null,
					"AwAAAKcUAAAAAAAApxQAAAAAAAABAAAAcqYUAAAAAAAAphQAAAAAAAABAAAAb6UUAAAAAAAApRQAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAqBQAAAAAAACoFAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "dp"
					},
					"AgAAAKUUAAAAAAAAphQAAAAAAAAAAAAAphQAAAAAAACnFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApRQAAAAAAAClFAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKcUAAAAAAAAqRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxQAAAAAAACnFAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKgUAAAAAAAAqRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqBQAAAAAAACoFAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "=`"
					},
					"AgAAAKoUAAAAAAAAqxQAAAAAAAAAAAAAqxQAAAAAAACsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqhQAAAAAAACqFAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAKsUAAAAAAAAqxQAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAArBQAAAAAAACsFAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "1;"
					},
					"AgAAAKsUAAAAAAAArBQAAAAAAAAAAAAArBQAAAAAAACtFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqxQAAAAAAACrFAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\nfor"
					},
					"BQAAAK0UAAAAAAAArhQAAAAAAAAAAAAArhQAAAAAAACvFAAAAAAAAAAAAACvFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAsRQAAAAAAAAAAAAAsRQAAAAAAACyFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRQAAAAAAACtFAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALIUAAAAAAAAtBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshQAAAAAAACyFAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAALMUAAAAAAAAtBQAAAAAAAAAAAAAtBQAAAAAAAC1FAAAAAAAAAAAAAC1FAAAAAAAALYUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsxQAAAAAAACzFAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAALYUAAAAAAAAtxQAAAAAAAAAAAAAtxQAAAAAAAC4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthQAAAAAAAC2FAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "=1"
					},
					"AgAAALgUAAAAAAAAuRQAAAAAAAAAAAAAuRQAAAAAAAC6FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBQAAAAAAAC4FAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": ";i<t"
					},
					"BAAAALoUAAAAAAAAuxQAAAAAAAAAAAAAuxQAAAAAAAC8FAAAAAAAAAAAAAC8FAAAAAAAAL0UAAAAAAAAAAAAAL0UAAAAAAAAvhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuhQAAAAAAAC6FAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "ar"
					},
					"AgAAAL4UAAAAAAAAvxQAAAAAAAAAAAAAvxQAAAAAAADAFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvhQAAAAAAAC+FAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert_completion",
					{
						"completion": "target",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "target"
					},
					"AgAAAL0UAAAAAAAAvRQAAAAAAAADAAAAdGFyvRQAAAAAAADDFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBQAAAAAAADAFAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAL0UAAAAAAAAvhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRQAAAAAAAC9FAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ";i++"
					},
					"BAAAAMQUAAAAAAAAxRQAAAAAAAAAAAAAxRQAAAAAAADGFAAAAAAAAAAAAADGFAAAAAAAAMcUAAAAAAAAAAAAAMcUAAAAAAAAyBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBQAAAAAAADEFAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMkUAAAAAAAAyxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyRQAAAAAAADJFAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAMoUAAAAAAAAyxQAAAAAAAAAAAAAyxQAAAAAAADMFAAAAAAAAAAAAADMFAAAAAAAAM0UAAAAAAAAAAAAAM0UAAAAAAAAzhQAAAAAAAAAAAAAyxQAAAAAAADLFAAAAAAAAAEAAAAJyxQAAAAAAADNFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyhQAAAAAAADKFAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAM0UAAAAAAAAzhQAAAAAAAAAAAAAzhQAAAAAAADPFAAAAAAAAAAAAADPFAAAAAAAANAUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRQAAAAAAADNFAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANAUAAAAAAAA0hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0BQAAAAAAADQFAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAANEUAAAAAAAA0hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0RQAAAAAAADRFAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"left_delete",
					null,
					"AQAAANEUAAAAAAAA0RQAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAA0hQAAAAAAADSFAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAANEUAAAAAAAA0hQAAAAAAAAAAAAA0hQAAAAAAADTFAAAAAAAAAAAAADTFAAAAAAAANQUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0RQAAAAAAADRFAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " j:n"
					},
					"BAAAANQUAAAAAAAA1RQAAAAAAAAAAAAA1RQAAAAAAADWFAAAAAAAAAAAAADWFAAAAAAAANcUAAAAAAAAAAAAANcUAAAAAAAA2BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BQAAAAAAADUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAANgUAAAAAAAA2RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BQAAAAAAADYFAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert_completion",
					{
						"completion": "nums",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nums"
					},
					"AgAAANcUAAAAAAAA1xQAAAAAAAACAAAAbnXXFAAAAAAAANsUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2RQAAAAAAADZFAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANwUAAAAAAAA3hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BQAAAAAAADcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAN0UAAAAAAAA3hQAAAAAAAAAAAAA3hQAAAAAAADgFAAAAAAAAAAAAADgFAAAAAAAAOEUAAAAAAAAAAAAAOEUAAAAAAAA4xQAAAAAAAAAAAAA3hQAAAAAAADeFAAAAAAAAAIAAAAJCd4UAAAAAAAA4RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RQAAAAAAADdFAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "dp"
					},
					"AgAAAOEUAAAAAAAA4hQAAAAAAAAAAAAA4hQAAAAAAADjFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RQAAAAAAADhFAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOMUAAAAAAAA5RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4xQAAAAAAADjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAOQUAAAAAAAA5RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BQAAAAAAADkFAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "=dp"
					},
					"AwAAAOYUAAAAAAAA5xQAAAAAAAAAAAAA5xQAAAAAAADoFAAAAAAAAAAAAADoFAAAAAAAAOkUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hQAAAAAAADmFAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					2,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AgAAAOkUAAAAAAAA6xQAAAAAAAAAAAAA6hQAAAAAAADsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RQAAAAAAADpFAAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAOsUAAAAAAAA7BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6xQAAAAAAADrFAAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"left_delete",
					null,
					"AQAAAOwUAAAAAAAA7BQAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAA7RQAAAAAAADtFAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"left_delete",
					null,
					"AQAAAOoUAAAAAAAA6hQAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAA6xQAAAAAAADrFAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "+dp"
					},
					"AwAAAOwUAAAAAAAA7RQAAAAAAAAAAAAA7RQAAAAAAADuFAAAAAAAAAAAAADuFAAAAAAAAO8UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7BQAAAAAAADsFAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAO8UAAAAAAAA8RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xQAAAAAAADvFAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "i-j"
					},
					"AwAAAPAUAAAAAAAA8RQAAAAAAAAAAAAA8RQAAAAAAADyFAAAAAAAAAAAAADyFAAAAAAAAPMUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BQAAAAAAADwFAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAN0UAAAAAAAA3hQAAAAAAAAAAAAA3hQAAAAAAADgFAAAAAAAAAAAAADgFAAAAAAAAOEUAAAAAAAAAAAAAOEUAAAAAAAA4hQAAAAAAAAAAAAA4hQAAAAAAADjFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RQAAAAAAADdFAAAAAAAAAAAAAAA4G5A"
				],
				[
					105,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOMUAAAAAAAA5RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4xQAAAAAAADjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "i-j>="
					},
					"BQAAAOQUAAAAAAAA5RQAAAAAAAAAAAAA5RQAAAAAAADmFAAAAAAAAAAAAADmFAAAAAAAAOcUAAAAAAAAAAAAAOcUAAAAAAAA6BQAAAAAAAAAAAAA6BQAAAAAAADpFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BQAAAAAAADkFAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAOkUAAAAAAAA6hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RQAAAAAAADpFAAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAO8UAAAAAAAA8BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xQAAAAAAADvFAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAMVAAAAAAAABBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAxUAAAAAAAADFQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\nretu"
					},
					"BgAAAAsVAAAAAAAADBUAAAAAAAAAAAAADBUAAAAAAAANFQAAAAAAAAAAAAANFQAAAAAAAA4VAAAAAAAAAAAAAA4VAAAAAAAADxUAAAAAAAAAAAAADxUAAAAAAAAQFQAAAAAAAAAAAAAQFQAAAAAAABEVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxUAAAAAAAALFQAAAAAAAAAAAAAAkHJA"
				],
				[
					116,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAA0VAAAAAAAADRUAAAAAAAAEAAAAcmV0dQ0VAAAAAAAAExUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERUAAAAAAAARFQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " dp"
					},
					"AwAAABMVAAAAAAAAFBUAAAAAAAAAAAAAFBUAAAAAAAAVFQAAAAAAAAAAAAAVFQAAAAAAABYVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAExUAAAAAAAATFQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABYVAAAAAAAAGBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhUAAAAAAAAWFQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "tar"
					},
					"AwAAABcVAAAAAAAAGBUAAAAAAAAAAAAAGBUAAAAAAAAZFQAAAAAAAAAAAAAZFQAAAAAAABoVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFxUAAAAAAAAXFQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert_completion",
					{
						"completion": "target",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "target"
					},
					"AgAAABcVAAAAAAAAFxUAAAAAAAADAAAAdGFyFxUAAAAAAAAdFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhUAAAAAAAAaFQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB4VAAAAAAAAHxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhUAAAAAAAAeFQAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "<<n"
					},
					"AwAAAL0VAAAAAAAAvhUAAAAAAAAAAAAAvhUAAAAAAAC/FQAAAAAAAAAAAAC/FQAAAAAAAMAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRUAAAAAAAC9FQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert_completion",
					{
						"completion": "nline",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nline"
					},
					"AgAAAL8VAAAAAAAAvxUAAAAAAAABAAAAbr8VAAAAAAAAxBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBUAAAAAAADAFQAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\ncout<<"
					},
					"CAAAAMUVAAAAAAAAxhUAAAAAAAAAAAAAxhUAAAAAAADHFQAAAAAAAAAAAADHFQAAAAAAAMgVAAAAAAAAAAAAAMgVAAAAAAAAyRUAAAAAAAAAAAAAyRUAAAAAAADKFQAAAAAAAAAAAADKFQAAAAAAAMsVAAAAAAAAAAAAAMsVAAAAAAAAzBUAAAAAAAAAAAAAzBUAAAAAAADNFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxRUAAAAAAADFFQAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "com"
					},
					"AwAAAM0VAAAAAAAAzhUAAAAAAAAAAAAAzhUAAAAAAADPFQAAAAAAAAAAAADPFQAAAAAAANAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRUAAAAAAADNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert_completion",
					{
						"completion": "combinationSum4_DP",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "combinationSum4_DP"
					},
					"AgAAAM0VAAAAAAAAzRUAAAAAAAADAAAAY29tzRUAAAAAAADfFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0BUAAAAAAADQFQAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN8VAAAAAAAA4RUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xUAAAAAAADfFQAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "arr,ra"
					},
					"BgAAAOAVAAAAAAAA4RUAAAAAAAAAAAAA4RUAAAAAAADiFQAAAAAAAAAAAADiFQAAAAAAAOMVAAAAAAAAAAAAAOMVAAAAAAAA5BUAAAAAAAAAAAAA5BUAAAAAAADlFQAAAAAAAAAAAADlFQAAAAAAAOYVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BUAAAAAAADgFQAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					2,
					"left_delete",
					null,
					"AgAAAOUVAAAAAAAA5RUAAAAAAAABAAAAYeQVAAAAAAAA5BUAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA5hUAAAAAAADmFQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "tar"
					},
					"AwAAAOQVAAAAAAAA5RUAAAAAAAAAAAAA5RUAAAAAAADmFQAAAAAAAAAAAADmFQAAAAAAAOcVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BUAAAAAAADkFQAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert_completion",
					{
						"completion": "target",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "target"
					},
					"AgAAAOQVAAAAAAAA5BUAAAAAAAADAAAAdGFy5BUAAAAAAADqFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xUAAAAAAADnFQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "<<n"
					},
					"AwAAAOsVAAAAAAAA7BUAAAAAAAAAAAAA7BUAAAAAAADtFQAAAAAAAAAAAADtFQAAAAAAAO4VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6xUAAAAAAADrFQAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert_completion",
					{
						"completion": "nline",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nline"
					},
					"AgAAAO0VAAAAAAAA7RUAAAAAAAABAAAAbu0VAAAAAAAA8hUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7hUAAAAAAADuFQAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPIVAAAAAAAA8xUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hUAAAAAAADyFQAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					6,
					"left_delete",
					null,
					"BgAAAPoUAAAAAAAA+hQAAAAAAAABAAAAXfkUAAAAAAAA+RQAAAAAAAABAAAAafgUAAAAAAAA+BQAAAAAAAABAAAAW/cUAAAAAAAA9xQAAAAAAAABAAAAcPYUAAAAAAAA9hQAAAAAAAABAAAAZPUUAAAAAAAA9RQAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAA+xQAAAAAAAD7FAAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAPYUAAAAAAAA9xQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9hQAAAAAAAD2FAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "Blind 75/DP/input.txt",
			"settings":
			{
				"buffer_size": 10,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAB2AAAAbWh1bnV6cXJrenNuaWR3YnVuCnN6dWxzcG1od3Bhem94aWp3YnEKYWJjCmRlZgoKCmFjZQphYmNkZQoKbWh1bnV6cXJrenNuaWR3YnVuCnN6dWxzcG1od3Bhem94aWp3YnEKCmJzYmluaW5tCmptamtia2prdg",
					"AQAAAAAAAAABAAAAdgAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n1"
					},
					"AgAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " 3"
					},
					"AgAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAoAAAAzIDQgCjEgMiAz",
					"AQAAAAAAAAABAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAAAEAAAAAAAAAAQAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " 3"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n9"
					},
					"AgAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAUAAAAxIDMKOQ",
					"AQAAAAAAAAABAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAAIAAAAAAAAAAAAAAAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n1"
					},
					"AgAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " 3"
					},
					"AgAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAoAAAAzIDQgCjEgMiAz",
					"AQAAAAAAAAABAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " 9"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAAIAAAAAAAAAAgAAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAAIAAAAAAAAAAwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n9"
					},
					"AgAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUAAAAAAAAABgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAACBA"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAUAAAAAAAAABgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					6,
					"left_delete",
					null,
					"BgAAAAUAAAAAAAAABQAAAAAAAAABAAAACgQAAAAAAAAABAAAAAAAAAABAAAAOQMAAAAAAAAAAwAAAAAAAAABAAAACgIAAAAAAAAAAgAAAAAAAAABAAAAMwEAAAAAAAAAAQAAAAAAAAABAAAAIAAAAAAAAAAAAAAAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\n1"
					},
					"AgAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " 3"
					},
					"AgAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "Blind 75/DP/output.txt",
			"settings":
			{
				"buffer_size": 4,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAACAAAANgoAAAAAAAAAAAEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAANwAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAAAAAAAABQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAMjIzMjMAAAAAAAAAAAoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAMTAwMDA4ODQ1MAAAAAAAAAAAAgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAACAAAALTEAAAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAACAAAALTEAAAAAAAAAAAEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAANwAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAMAowCgAAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "Blind 75/DP/error.txt",
			"settings":
			{
				"buffer_size": 8,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAVGltZTogMTUKAAAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAVGltZTogMAoAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"reinden",
				"Indentation: Reindent Lines"
			],
			[
				"red",
				"Indentation: Reindent Lines"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/Tech learn and project/coding/CPP practice/Blind 75",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/DP",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Tree"
	],
	"file_history":
	[
		"/F/Tech learn and project/coding/CPP practice/Blind 75/DP/6.Combination_Sum.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Tree/Revise_Tree_DS.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Tree/error.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Tree/output.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Tree/input.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/error.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/output.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/5.Remove_nth_from_end.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/3.Merge_Two_sorted_LinkedLists.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/4.Merge_K_Sorted_LinkedList.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/2.Detect_Cycle_In_LinkedList.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Graph/Revise_Graph.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Graph/input.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Graph/error.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Graph/output.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/input.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/1.Reverse_a_Linked_list.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/Linked_List/Revise_Linked_List.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/DP/error.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/DP/output.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/DP/input.txt",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/DP/4.Longest_Common_Subsequence.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/DP/3.Longest_Increasing_Subsequence.cpp",
		"/F/Tech learn and project/coding/CPP practice/Blind 75/DP/2.Coin_Change.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/error.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/2.Coin_Change.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/input.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/output.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DP/1.Climbing_Stairs.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/output.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/input.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/error.txt",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Climbing_Stairs.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Contains_Duplicate.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Container_With_Most_Water.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Three_Sum.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/DailyChallange_CoinChange.cpp",
		"/E/json",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Missing_Number.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Counting_Bits.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Kira_amazon.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Reverse_Bits.cpp",
		"/C/Users/Abhishek Wisteli/Desktop/backupProcessingPipeline.js",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Number_Of_1_Bits.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Sum_Of_Two_Integers.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Search_In_Rotated_Sorted_Array.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Minimum_In_Rotated_Sorted_Array.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Product_Of_Array_Except_Self.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Maximum_Subarray.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Maximum_Product_Subarray.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Maximum_Product_Of_Three_Numbers.cpp",
		"/C/Users/Abhishek Wisteli/AppData/Roaming/Sublime Text/Packages/User/CPP_template.sublime-snippet",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Two_Sum.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Best_Time_To_Buy_And_Sell_Stock.cpp",
		"/F/Tech learn and project/coding/CPP practice/leetcode/Two Sum.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques7.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/DP_Ques1.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques10.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques11.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques2.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques1.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques3.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/String_ques5.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques36.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_Ques35.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/error.txt",
		"/F/Tech learn and project/coding/CPP practice/love babbar/output.txt",
		"/F/Tech learn and project/coding/CPP practice/love babbar/input.txt",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques34.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques30.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques33.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques32.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques31.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques29.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques19.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques28.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques26.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques18.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques25.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/fileInput (1).txt.crdownload",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques9.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques24.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques23.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques22.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques21.cpp",
		"/F/Tech learn and project/coding/CPP practice/love babbar/Array_ques20.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/LinkedList.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/friend_class.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Codevita2022_ques1.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Codevita2022_ques2.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Codevita2022_ques4.py",
		"/F/Tech learn and project/coding/CPP practice/learn DS/graph_adjacencyList_cycleCheck_Directed.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/graph_adjacencyList_cycleCheck_Undirected.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/segmentTree_range_Query.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/deepti.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/shubham_chocolate.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/graph_adjacencyList_SimpleUsingArrayOfVector_gfg.cpp",
		"/C/Users/Abhishek Wisteli/Desktop/Screenshot 2022-02-04 100917.png",
		"/F/Tech learn and project/coding/CPP practice/learn DS/graph_adjacencyList_ComplexUsingYoutube.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/prakhar.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/output.txt",
		"/F/Tech learn and project/coding/CPP practice/learn DS/bianryheap.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Stack.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Queue.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/Binarytree.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/BinaryTreeViaArray.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/BinarySearchTree.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/temp.cpp",
		"/F/Tech learn and project/coding/CPP practice/learn DS/anupamq2.cpp",
		"/G/Desktop Folders/Tech learn and project/coding/CPP practice/output.txt",
		"/G/Desktop Folders/Tech learn and project/coding/CPP practice/error.txt",
		"/G/Desktop Folders/Tech learn and project/coding/CPP practice/input.txt",
		"/G/Desktop Folders/Tech learn and project/coding/CPP practice/hello.cpp",
		"/C/Users/Abhishek Wisteli/AppData/Roaming/Sublime Text/Packages/User/hello.cpp"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ptr2",
			"ptr1",
			"reverseLinkedList",
			"dp"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "F:\\Tech learn and project\\coding\\CPP practice\\Blind 75"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Blind 75/DP/5.Word_Break.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5124,
						"regions":
						{
						},
						"selection":
						[
							[
								5124,
								5124
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Blind 75/DP/7.House_Robber.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5394,
						"regions":
						{
						},
						"selection":
						[
							[
								4862,
								4862
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1171.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Blind 75/DP/6.Combination_Sum.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5964,
						"regions":
						{
						},
						"selection":
						[
							[
								5257,
								5402
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1796.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 3,
					"file": "Blind 75/DP/input.txt",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10,
						"regions":
						{
						},
						"selection":
						[
							[
								9,
								9
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 4,
					"file": "Blind 75/DP/output.txt",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Blind 75/DP/error.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.78052084265,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/CPP.sublime-build",
	"project": "",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		]
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 247.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
